/******/ (function(modules) { // webpackBootstrap
/******/ 	// The module cache
/******/ 	var installedModules = {};
/******/
/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {
/******/
/******/ 		// Check if module is in cache
/******/ 		if(installedModules[moduleId]) {
/******/ 			return installedModules[moduleId].exports;
/******/ 		}
/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = installedModules[moduleId] = {
/******/ 			i: moduleId,
/******/ 			l: false,
/******/ 			exports: {}
/******/ 		};
/******/
/******/ 		// Execute the module function
/******/ 		modules[moduleId].call(module.exports, module, module.exports, __webpack_require__);
/******/
/******/ 		// Flag the module as loaded
/******/ 		module.l = true;
/******/
/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}
/******/
/******/
/******/ 	// expose the modules object (__webpack_modules__)
/******/ 	__webpack_require__.m = modules;
/******/
/******/ 	// expose the module cache
/******/ 	__webpack_require__.c = installedModules;
/******/
/******/ 	// define getter function for harmony exports
/******/ 	__webpack_require__.d = function(exports, name, getter) {
/******/ 		if(!__webpack_require__.o(exports, name)) {
/******/ 			Object.defineProperty(exports, name, { enumerable: true, get: getter });
/******/ 		}
/******/ 	};
/******/
/******/ 	// define __esModule on exports
/******/ 	__webpack_require__.r = function(exports) {
/******/ 		if(typeof Symbol !== 'undefined' && Symbol.toStringTag) {
/******/ 			Object.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });
/******/ 		}
/******/ 		Object.defineProperty(exports, '__esModule', { value: true });
/******/ 	};
/******/
/******/ 	// create a fake namespace object
/******/ 	// mode & 1: value is a module id, require it
/******/ 	// mode & 2: merge all properties of value into the ns
/******/ 	// mode & 4: return value when already ns object
/******/ 	// mode & 8|1: behave like require
/******/ 	__webpack_require__.t = function(value, mode) {
/******/ 		if(mode & 1) value = __webpack_require__(value);
/******/ 		if(mode & 8) return value;
/******/ 		if((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;
/******/ 		var ns = Object.create(null);
/******/ 		__webpack_require__.r(ns);
/******/ 		Object.defineProperty(ns, 'default', { enumerable: true, value: value });
/******/ 		if(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));
/******/ 		return ns;
/******/ 	};
/******/
/******/ 	// getDefaultExport function for compatibility with non-harmony modules
/******/ 	__webpack_require__.n = function(module) {
/******/ 		var getter = module && module.__esModule ?
/******/ 			function getDefault() { return module['default']; } :
/******/ 			function getModuleExports() { return module; };
/******/ 		__webpack_require__.d(getter, 'a', getter);
/******/ 		return getter;
/******/ 	};
/******/
/******/ 	// Object.prototype.hasOwnProperty.call
/******/ 	__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };
/******/
/******/ 	// __webpack_public_path__
/******/ 	__webpack_require__.p = "";
/******/
/******/
/******/ 	// Load entry module and return exports
/******/ 	return __webpack_require__(__webpack_require__.s = "./js/main.js");
/******/ })
/************************************************************************/
/******/ ({

/***/ "./js/main.js":
/*!********************!*\
  !*** ./js/main.js ***!
  \********************/
/*! no exports provided */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony import */ var _utils_ios_vh_fix__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./utils/ios-vh-fix */ "./js/utils/ios-vh-fix.js");
/* harmony import */ var _modules_modals_init_modals__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./modules/modals/init-modals */ "./js/modules/modals/init-modals.js");
/* harmony import */ var _modules_form_init_custom_select__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./modules/form/init-custom-select */ "./js/modules/form/init-custom-select.js");
/* harmony import */ var _modules_form_init_form_validate__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./modules/form/init-form-validate */ "./js/modules/form/init-form-validate.js");
/* harmony import */ var _modules_tabs_init_tabs__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./modules/tabs/init-tabs */ "./js/modules/tabs/init-tabs.js");
/* harmony import */ var _modules_header_init_header__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ./modules/header/init-header */ "./js/modules/header/init-header.js");
/* harmony import */ var _modules_header_init_menu__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ./modules/header/init-menu */ "./js/modules/header/init-menu.js");
/* harmony import */ var _modules_header_set_header_height__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ./modules/header/set-header-height */ "./js/modules/header/set-header-height.js");
/* harmony import */ var _modules_sliders_init_facts_slider__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! ./modules/sliders/init-facts-slider */ "./js/modules/sliders/init-facts-slider.js");
/* harmony import */ var _modules_sliders_init_job_slider__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! ./modules/sliders/init-job-slider */ "./js/modules/sliders/init-job-slider.js");
/* harmony import */ var _modules_sliders_init_values_slider__WEBPACK_IMPORTED_MODULE_10__ = __webpack_require__(/*! ./modules/sliders/init-values-slider */ "./js/modules/sliders/init-values-slider.js");
/* harmony import */ var _modules_sliders_init_history_slider__WEBPACK_IMPORTED_MODULE_11__ = __webpack_require__(/*! ./modules/sliders/init-history-slider */ "./js/modules/sliders/init-history-slider.js");
/* harmony import */ var _modules_sliders_init_team_slider__WEBPACK_IMPORTED_MODULE_12__ = __webpack_require__(/*! ./modules/sliders/init-team-slider */ "./js/modules/sliders/init-team-slider.js");
/* harmony import */ var _modules_sliders_init_principles_slider__WEBPACK_IMPORTED_MODULE_13__ = __webpack_require__(/*! ./modules/sliders/init-principles-slider */ "./js/modules/sliders/init-principles-slider.js");
/* harmony import */ var _modules_sliders_init_news_slider__WEBPACK_IMPORTED_MODULE_14__ = __webpack_require__(/*! ./modules/sliders/init-news-slider */ "./js/modules/sliders/init-news-slider.js");
/* harmony import */ var _modules_accordion_init_accordion__WEBPACK_IMPORTED_MODULE_15__ = __webpack_require__(/*! ./modules/accordion/init-accordion */ "./js/modules/accordion/init-accordion.js");
/* harmony import */ var _modules_map_init_map__WEBPACK_IMPORTED_MODULE_16__ = __webpack_require__(/*! ./modules/map/init-map */ "./js/modules/map/init-map.js");
/* harmony import */ var _modules_map_init_map_business__WEBPACK_IMPORTED_MODULE_17__ = __webpack_require__(/*! ./modules/map/init-map-business */ "./js/modules/map/init-map-business.js");
/* harmony import */ var _modules_init_tender_b2b__WEBPACK_IMPORTED_MODULE_18__ = __webpack_require__(/*! ./modules/init-tender-b2b */ "./js/modules/init-tender-b2b.js");
/* harmony import */ var _modules_init_description_text__WEBPACK_IMPORTED_MODULE_19__ = __webpack_require__(/*! ./modules/init-description-text */ "./js/modules/init-description-text.js");
/* harmony import */ var _modules_init_first_load__WEBPACK_IMPORTED_MODULE_20__ = __webpack_require__(/*! ./modules/init-first-load */ "./js/modules/init-first-load.js");
/* harmony import */ var _modules_init_scroll_btn__WEBPACK_IMPORTED_MODULE_21__ = __webpack_require__(/*! ./modules/init-scroll-btn */ "./js/modules/init-scroll-btn.js");
/* harmony import */ var _modules_init_intro_video__WEBPACK_IMPORTED_MODULE_22__ = __webpack_require__(/*! ./modules/init-intro-video */ "./js/modules/init-intro-video.js");
/* harmony import */ var _modules_lazy_video_load__WEBPACK_IMPORTED_MODULE_23__ = __webpack_require__(/*! ./modules/lazy-video-load */ "./js/modules/lazy-video-load.js");
/* harmony import */ var _modules_show_label__WEBPACK_IMPORTED_MODULE_24__ = __webpack_require__(/*! ./modules/show-label */ "./js/modules/show-label.js");
/* harmony import */ var _modules_set_mob_intro_height__WEBPACK_IMPORTED_MODULE_25__ = __webpack_require__(/*! ./modules/set-mob-intro-height */ "./js/modules/set-mob-intro-height.js");
/* harmony import */ var _modules_text_split_animation_words__WEBPACK_IMPORTED_MODULE_26__ = __webpack_require__(/*! ./modules/text-split-animation-words */ "./js/modules/text-split-animation-words.js");
/* harmony import */ var _modules_toggle_resources_table__WEBPACK_IMPORTED_MODULE_27__ = __webpack_require__(/*! ./modules/toggle-resources-table */ "./js/modules/toggle-resources-table.js");
/* harmony import */ var _modules_init_running_line__WEBPACK_IMPORTED_MODULE_28__ = __webpack_require__(/*! ./modules/init-running-line */ "./js/modules/init-running-line.js");
/* harmony import */ var _modules_init_video_control__WEBPACK_IMPORTED_MODULE_29__ = __webpack_require__(/*! ./modules/init-video-control */ "./js/modules/init-video-control.js");
/* harmony import */ var _modules_init_contacts_city__WEBPACK_IMPORTED_MODULE_30__ = __webpack_require__(/*! ./modules/init-contacts-city */ "./js/modules/init-contacts-city.js");
/* harmony import */ var _modules_map_init_map_moscow__WEBPACK_IMPORTED_MODULE_31__ = __webpack_require__(/*! ./modules/map/init-map-moscow */ "./js/modules/map/init-map-moscow.js");
/* harmony import */ var _modules_map_init_map_chita__WEBPACK_IMPORTED_MODULE_32__ = __webpack_require__(/*! ./modules/map/init-map-chita */ "./js/modules/map/init-map-chita.js");
































 // ---------------------------------

window.addEventListener('DOMContentLoaded', function () {
  // Utils
  // ---------------------------------
  Object(_utils_ios_vh_fix__WEBPACK_IMPORTED_MODULE_0__["iosVhFix"])();
  Object(_modules_header_set_header_height__WEBPACK_IMPORTED_MODULE_7__["setHeaderHeight"])(); // Modules
  // ---------------------------------
  // все скрипты должны быть в обработчике 'DOMContentLoaded', но не все в 'load'
  // в load следует добавить скрипты, не участвующие в работе первого экрана

  window.addEventListener('load', function () {
    Object(_modules_init_first_load__WEBPACK_IMPORTED_MODULE_20__["initFirstLoad"])();
    Object(_modules_header_init_header__WEBPACK_IMPORTED_MODULE_5__["initHeader"])();
    Object(_modules_header_init_menu__WEBPACK_IMPORTED_MODULE_6__["initMenu"])();
    Object(_modules_lazy_video_load__WEBPACK_IMPORTED_MODULE_23__["loadVideo"])();
    Object(_modules_text_split_animation_words__WEBPACK_IMPORTED_MODULE_26__["initTextSplitWordsAnimation"])();
    Object(_modules_init_scroll_btn__WEBPACK_IMPORTED_MODULE_21__["initScrollBtn"])();
    Object(_modules_sliders_init_team_slider__WEBPACK_IMPORTED_MODULE_12__["initTeamSlider"])();
    Object(_modules_init_intro_video__WEBPACK_IMPORTED_MODULE_22__["initIntroVideo"])();
    Object(_modules_set_mob_intro_height__WEBPACK_IMPORTED_MODULE_25__["setMobIntroHeight"])();
    Object(_modules_modals_init_modals__WEBPACK_IMPORTED_MODULE_1__["initModals"])();
    Object(_modules_form_init_custom_select__WEBPACK_IMPORTED_MODULE_2__["initCustomSelect"])();
    Object(_modules_form_init_form_validate__WEBPACK_IMPORTED_MODULE_3__["initFormValidate"])();
    Object(_modules_sliders_init_facts_slider__WEBPACK_IMPORTED_MODULE_8__["initFactsSlider"])();
    Object(_modules_sliders_init_values_slider__WEBPACK_IMPORTED_MODULE_10__["initValuesSlider"])();
    Object(_modules_sliders_init_history_slider__WEBPACK_IMPORTED_MODULE_11__["initHistorySlider"])();
    Object(_modules_toggle_resources_table__WEBPACK_IMPORTED_MODULE_27__["initToggleItems"])();
    Object(_modules_map_init_map__WEBPACK_IMPORTED_MODULE_16__["initMap"])();
    Object(_modules_map_init_map_business__WEBPACK_IMPORTED_MODULE_17__["initMapBusiness"])();
    Object(_modules_sliders_init_job_slider__WEBPACK_IMPORTED_MODULE_9__["initJobSlider"])(); // initPrinciplesSlider();

    Object(_modules_init_running_line__WEBPACK_IMPORTED_MODULE_28__["initRunningLine"])();
    Object(_modules_show_label__WEBPACK_IMPORTED_MODULE_24__["showLabel"])();
    Object(_modules_init_video_control__WEBPACK_IMPORTED_MODULE_29__["controlVideo"])();
    Object(_modules_tabs_init_tabs__WEBPACK_IMPORTED_MODULE_4__["initTabs"])();
    Object(_modules_init_contacts_city__WEBPACK_IMPORTED_MODULE_30__["initContactsCity"])();
    Object(_modules_sliders_init_news_slider__WEBPACK_IMPORTED_MODULE_14__["initNewsSlider"])();
    Object(_modules_map_init_map_moscow__WEBPACK_IMPORTED_MODULE_31__["initMapMoscow"])();
    Object(_modules_map_init_map_chita__WEBPACK_IMPORTED_MODULE_32__["initMapChita"])(); // initTenderB2b();

    Object(_modules_accordion_init_accordion__WEBPACK_IMPORTED_MODULE_15__["initAccordions"])();
    Object(_modules_init_description_text__WEBPACK_IMPORTED_MODULE_19__["initDescriptionText"])();
    window.sal({
      once: true,
      threshold: 0.5
    });
  });
}); // ---------------------------------
// ❗❗❗ обязательно установите плагины eslint, stylelint, editorconfig в редактор кода.
// привязывайте js не на классы, а на дата атрибуты (data-validate)
// вместо модификаторов .block--active используем утилитарные классы
// .is-active || .is-open || .is-invalid и прочие (обязателен нейминг в два слова)
// .select.select--opened ❌ ---> [data-select].is-open ✅
// выносим все в дата атрибуты
// url до иконок пинов карты, настройки автопрокрутки слайдера, url к json и т.д.
// для адаптивного JS используейтся matchMedia и addListener
// const breakpoint = window.matchMedia(`(min-width:1024px)`);
// const breakpointChecker = () => {
//   if (breakpoint.matches) {
//   } else {
//   }
// };
// breakpoint.addListener(breakpointChecker);
// breakpointChecker();
// используйте .closest(el)

/***/ }),

/***/ "./js/modules/accordion/accordions.js":
/*!********************************************!*\
  !*** ./js/modules/accordion/accordions.js ***!
  \********************************************/
/*! exports provided: Accordions */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "Accordions", function() { return Accordions; });
function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); Object.defineProperty(Constructor, "prototype", { writable: false }); return Constructor; }

var Accordions = /*#__PURE__*/function () {
  function Accordions() {
    _classCallCheck(this, Accordions);

    this._openHeight = 0;
    this._windowWidth = window.innerWidth;
    this._documentClickHandler = this._documentClickHandler.bind(this);
    this._windowResizeHandler = this._windowResizeHandler.bind(this);

    this._init();
  }

  _createClass(Accordions, [{
    key: "_init",
    value: function _init() {
      this.fullUpdate();
      document.addEventListener('click', this._documentClickHandler);
      window.addEventListener('resize', this._windowResizeHandler);
    }
  }, {
    key: "_documentClickHandler",
    value: function _documentClickHandler(evt) {
      var target = evt.target;

      if (!target.closest('[data-accordion="button"]')) {
        return;
      }

      evt.preventDefault();
      var parent = target.closest('[data-accordion="parent"]');

      if (parent.dataset.destroy && !window.matchMedia(parent.dataset.destroy).matches) {
        return;
      }

      var element = target.closest('[data-accordion="element"]');

      if (element.classList.contains('is-active')) {
        this.closeAccordion(element);
        return;
      }

      this.openAccordion(element);
    }
  }, {
    key: "_windowResizeHandler",
    value: function _windowResizeHandler() {
      if (this._windowWidth === window.innerWidth) {
        return;
      }

      this._windowWidth = window.innerWidth;
      this.updateAccordionsHeight();
    }
  }, {
    key: "closeAllAccordion",
    value: function closeAllAccordion(parent) {
      var _this = this;

      var elements = parent.querySelectorAll('[data-accordion="element"]');
      elements.forEach(function (element) {
        var currentParent = element.closest('[data-accordion="parent"]');

        if (currentParent === parent) {
          _this.closeAccordion(element);
        }
      });
    }
  }, {
    key: "updateAccordionsHeight",
    value: function updateAccordionsHeight() {
      var element = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : null;

      if (element) {
        var content = element.querySelector('[data-accordion="content"]');
        content.style.transition = 'none';
        content.style.maxHeight = "".concat(content.scrollHeight, "px");
        setTimeout(function () {
          content.style.transition = null;
        });
        return;
      }

      var closeElements = document.querySelectorAll('[data-accordion="element"]:not(.is-active)');
      closeElements.forEach(function (closeElement) {
        var parent = closeElement.closest('[data-accordion="parent"]');
        var content = closeElement.querySelector('[data-accordion="content"]');

        if (parent.dataset.destroy && !window.matchMedia(parent.dataset.destroy).matches) {
          content.style.maxHeight = '100%';
          return;
        }

        content.style.maxHeight = null;
      });
      var openElements = document.querySelectorAll('[data-accordion="element"].is-active');
      openElements.forEach(function (openElement) {
        var content = openElement.querySelector('[data-accordion="content"]');
        var parent = openElement.closest('[data-accordion="parent"]');

        if (parent.dataset.destroy && !window.matchMedia(parent.dataset.destroy).matches) {
          content.style.maxHeight = '100%';
          return;
        }

        content.style.transition = 'none';
        content.style.maxHeight = "".concat(content.scrollHeight, "px");
        setTimeout(function () {
          content.style.transition = null;
        });
      });
    }
  }, {
    key: "fullUpdate",
    value: function fullUpdate() {
      var _this2 = this;

      var parent = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : null;
      var transition = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;
      var openElements;

      if (parent) {
        openElements = parent.querySelectorAll('[data-accordion="element"].is-active');
      } else {
        openElements = document.querySelectorAll('[data-accordion="element"].is-active');
      }

      openElements.forEach(function (openElement) {
        var innerParent = openElement.querySelector('[data-accordion="parent"]');

        if (innerParent) {
          return;
        }

        _this2.openAccordion(openElement, transition);
      });
      this.updateAccordionsHeight();
    }
  }, {
    key: "openAccordion",
    value: function openAccordion(element) {
      var transition = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : true;
      var parentElement = element.closest('[data-accordion="parent"]');
      var contentElement = element.querySelector('[data-accordion="content"]');
      this._openHeight += contentElement.scrollHeight;

      if (parentElement.hasAttribute('data-single')) {
        this.closeAllAccordion(parentElement);
      }

      element.classList.add('is-active');

      if (transition) {
        contentElement.style.maxHeight = "".concat(this._openHeight, "px");
      } else {
        contentElement.style.transition = 'none';
        contentElement.style.maxHeight = "".concat(this._openHeight, "px");
        setTimeout(function () {
          contentElement.style.transition = null;
        });
      }

      if (parentElement.closest('[data-accordion="element"]')) {
        this.openAccordion(parentElement.closest('[data-accordion="element"]'), transition);
        return;
      }

      this._openHeight = 0;
    }
  }, {
    key: "closeAccordion",
    value: function closeAccordion(element) {
      var transition = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : true;
      var contentElement = element.querySelector('[data-accordion="content"]');

      if (!contentElement) {
        return;
      }

      element.classList.remove('is-active');

      if (transition) {
        contentElement.style.maxHeight = '0';
      } else {
        contentElement.style.transition = 'none';
        contentElement.style.maxHeight = '0';
        setTimeout(function () {
          contentElement.style.transition = null;
        });
      }
    }
  }]);

  return Accordions;
}();

/***/ }),

/***/ "./js/modules/accordion/init-accordion.js":
/*!************************************************!*\
  !*** ./js/modules/accordion/init-accordion.js ***!
  \************************************************/
/*! exports provided: initAccordions, accordions */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "initAccordions", function() { return initAccordions; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "accordions", function() { return accordions; });
/* harmony import */ var _accordions__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./accordions */ "./js/modules/accordion/accordions.js");

var accordions;

var initAccordions = function initAccordions() {
  accordions = new _accordions__WEBPACK_IMPORTED_MODULE_0__["Accordions"](); // Используйте в разработке экспортируемую переменную accordions, window сделан для бэкэнда

  window.accordions = accordions;
};



/***/ }),

/***/ "./js/modules/form/custom-select.js":
/*!******************************************!*\
  !*** ./js/modules/form/custom-select.js ***!
  \******************************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "default", function() { return CustomSelect; });
function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); Object.defineProperty(Constructor, "prototype", { writable: false }); return Constructor; }

// Функции создания разметки и рендера нативного селекта
var createElement = function createElement(template) {
  var newElement = document.createElement('div');
  newElement.innerHTML = template;
  return newElement.firstChild;
};

var renderElement = function renderElement(container, component) {
  var place = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 'beforeend';

  switch (place) {
    case 'prepend':
      container.prepend(component);
      break;

    case 'afterend':
      container.after(component);
      break;

    case 'beforeend':
      container.append(component);
      break;
  }
};

var createNativeOptionsMarkup = function createNativeOptionsMarkup(items, activeIndex) {
  return items.map(function (el, index) {
    if (activeIndex.length) {
      var currentIndex = activeIndex.find(function (item) {
        return item === index;
      });

      if (currentIndex === index) {
        return "<option ".concat(el.value ? "value=".concat(el.value) : '', " selected>").concat(el.text ? "".concat(el.text) : '', "</option>");
      } else {
        return "<option ".concat(el.value ? "value=".concat(el.value) : '', ">").concat(el.text ? "".concat(el.text) : '', "</option>");
      }
    } else {
      return "<option ".concat(el.value ? "value=".concat(el.value) : '', ">").concat(el.text ? "".concat(el.text) : '', "</option>");
    }
  }).join('\n');
};

var createNativeSelectMarkup = function createNativeSelectMarkup(_ref) {
  var id = _ref.id,
      items = _ref.items,
      multiple = _ref.multiple,
      name = _ref.name,
      required = _ref.required,
      _ref$activeIndex = _ref.activeIndex,
      activeIndex = _ref$activeIndex === void 0 ? [] : _ref$activeIndex;
  return "<select ".concat(id ? "id='".concat(id, "'") : '', " ").concat(name ? "name='".concat(name, "'") : '', " ").concat(multiple ? 'multiple' : '', " ").concat(required ? 'required' : '', " tabindex=\"-1\" aria-hidden=\"true\">\n            <option value=\"\"></option>\n            ").concat(createNativeOptionsMarkup(items, activeIndex), "\n          </select>");
}; // Функция расстановки активных состояний у li по умолчанию


var setActiveState = function setActiveState(multiple, selectItems) {
  var flag = true;
  var activeIndex = [];
  selectItems.forEach(function (item, index) {
    if (multiple) {
      if (item.getAttribute('aria-selected') === 'true') {
        activeIndex.push(index);
      }
    } else {
      if (item.getAttribute('aria-selected') === 'true' && flag) {
        activeIndex.push(index);
        flag = false;
      } else {
        item.setAttribute('aria-selected', 'false');
      }
    }
  });
  return activeIndex;
}; // Формирование строки для мультиселекта


var createMultiString = function createMultiString(arr) {
  var str = '';

  if (arr.length) {
    if (arr.length === 1) {
      str = arr[0].innerHTML;
    } else {
      arr.forEach(function (el, index) {
        if (index === arr.length - 1) {
          str += el.innerHTML;
        } else {
          str += "".concat(el.innerHTML, ", ");
        }
      });
    }
  }

  return str;
}; // Функция расстановки активных состояний у li по умолчанию


var setSelectActiveState = function setSelectActiveState(multiple, insert, item) {
  var buttonTextBlock = item.querySelector('.custom-select__text');
  var activeItems = item.querySelectorAll('.custom-select__item[aria-selected="true"]');
  var label = item.querySelector('.custom-select__label');
  var str = createMultiString(activeItems);
  buttonTextBlock.style.transition = '0s';

  if (label) {
    label.style.transition = '0s';
  }

  setTimeout(function () {
    if (label) {
      label.style.transition = null;
    }

    buttonTextBlock.style.transition = null;
  }, 300);

  if (multiple && insert) {
    item.classList.add('not-empty');
    buttonTextBlock.innerHTML = str;
  } else if (multiple) {
    return;
  } else {
    item.classList.add('not-empty');
    buttonTextBlock.innerHTML = activeItems[0].innerHTML;
  }
}; // Функция создания структуры селекта, после создания селекта она сразу его рендерит


var createSelectStructure = function createSelectStructure(item) {
  var options = {};
  options.items = [];
  var multiple = item.dataset.multiple;
  var id = item.dataset.id;
  var name = item.dataset.name;
  var required = item.dataset.required;
  var insert = item.dataset.insert;
  var selectItems = item.querySelectorAll('.custom-select__item');
  var activeIndex = setActiveState(multiple, selectItems);

  if (activeIndex.length) {
    options.activeIndex = activeIndex;
    setSelectActiveState(multiple, insert, item);
  }

  options.name = name || false;
  options.id = id || false;
  options.required = Boolean(required);
  options.multiple = Boolean(multiple);
  selectItems.forEach(function (selectItem) {
    var value = selectItem.dataset.selectValue;
    var itemInfo = {};
    itemInfo.text = selectItem.innerText;
    itemInfo.value = value;
    options.items.push(itemInfo);
  });
  renderElement(item, createElement(createNativeSelectMarkup(options)));
  return item;
}; // Закрытие селекта


var closeSelect = function closeSelect() {
  var activeSelect = document.querySelector('[data-select].is-open');
  document.removeEventListener('click', onDocumentClick);
  document.removeEventListener('keydown', onEscapePress);

  if (activeSelect) {
    activeSelect.classList.remove('is-open');
  }
}; // Действия при клике на элемент списка


var clickAction = function clickAction(el, index) {
  var parent = el.closest('.custom-select');
  var multiple = parent.dataset.multiple;
  var insert = parent.dataset.insert;
  var buttonTextBlock = parent.querySelector('.custom-select__text');
  var itemText = el.innerText;
  var options = parent.querySelectorAll('option');
  var select = parent.querySelector('select');
  var changeEv = new CustomEvent('change');
  var inputEv = new CustomEvent('input');
  select.dispatchEvent(changeEv);
  select.dispatchEvent(inputEv);
  var form = select.closest('form');

  if (form) {
    var formChangeEv = new CustomEvent('change');
    var formInputEv = new CustomEvent('input');
    form.dispatchEvent(formChangeEv);
    form.dispatchEvent(formInputEv);
  }

  if (multiple) {
    if (insert === 'true') {
      if (el.getAttribute('aria-selected') === 'true') {
        el.setAttribute('aria-selected', 'false');
        var activeItems = parent.querySelectorAll('.custom-select__item[aria-selected="true"]');
        var str = createMultiString(activeItems);
        options[index + 1].selected = false;
        buttonTextBlock.innerText = str;

        if (!str) {
          parent.classList.remove('not-empty');
          parent.classList.remove('is-valid');
        }
      } else {
        el.setAttribute('aria-selected', 'true');

        var _activeItems = parent.querySelectorAll('.custom-select__item[aria-selected="true"]');

        var _str = createMultiString(_activeItems);

        buttonTextBlock.innerText = _str;
        parent.classList.add('not-empty');
        parent.classList.add('is-valid');
        options[index + 1].selected = true;
      }
    } else {
      if (el.getAttribute('aria-selected') === 'true') {
        el.setAttribute('aria-selected', 'false');
        options[index + 1].selected = false;
      } else {
        el.setAttribute('aria-selected', 'true');
        options[index + 1].selected = true;
      }
    }
  } else {
    var activeItem = parent.querySelector('.custom-select__item[aria-selected="true"]');

    if (el.getAttribute('aria-selected') === 'true') {
      closeSelect();
    } else {
      if (activeItem) {
        activeItem.setAttribute('aria-selected', 'false');
        parent.classList.remove('not-empty');
        parent.classList.remove('is-valid');
      }

      buttonTextBlock.innerText = itemText;
      el.setAttribute('aria-selected', 'true');
      parent.classList.add('not-empty');
      parent.classList.add('is-valid');
      options[index + 1].selected = true;
      closeSelect();
    }
  }
}; // Обработчики событий


var onDocumentClick = function onDocumentClick(_ref2) {
  var target = _ref2.target;

  if (!target.closest('.custom-select')) {
    closeSelect();
  }
};

var onEscapePress = function onEscapePress(e) {
  var isEscape = e.key === 'Escape';

  if (isEscape) {
    closeSelect();
  }
};

var onItemClick = function onItemClick(el, index) {
  clickAction(el, index);
};

var onItemKeydown = function onItemKeydown(e, el, index) {
  var isEnter = e.key === 'Enter';

  if (isEnter) {
    clickAction(el, index);
  }
};

var onLastItemKeydown = function onLastItemKeydown(e) {
  var isTab = e.key === 'Tab';

  if (isTab) {
    closeSelect();
  }
};

var onSelectClick = function onSelectClick(e) {
  var parent = e.target.closest('[data-select]');
  var activeSelect = document.querySelector('[data-select].is-open');
  parent.classList.remove('is-invalid');

  if (activeSelect && activeSelect === parent) {
    activeSelect.classList.remove('is-open');
    return;
  }

  if (activeSelect) {
    closeSelect();
  }

  document.addEventListener('click', onDocumentClick);
  document.addEventListener('keydown', onEscapePress);

  if (parent.classList.contains('is-open')) {
    parent.classList.remove('is-open');
  } else {
    parent.classList.add('is-open');
  }
};

var onSelectKeydown = function onSelectKeydown(e) {
  var parent = e.target.closest('[data-select]');
  parent.classList.remove('is-invalid');

  if (e.shiftKey && e.key === 'Tab' && parent.closest('.is-open')) {
    closeSelect();
  }
}; // Все действия с селектом


var setSelectAction = function setSelectAction(item) {
  var customSelect = item;
  var button = customSelect.querySelector('.custom-select__button');
  var selectItems = customSelect.querySelectorAll('.custom-select__item');
  button.addEventListener('click', onSelectClick);
  button.addEventListener('keydown', onSelectKeydown);
  selectItems.forEach(function (el, index) {
    el.addEventListener('click', function () {
      onItemClick(el, index);
    });
    el.addEventListener('keydown', function (e) {
      onItemKeydown(e, el, index);
    });

    if (index === selectItems.length - 1) {
      el.addEventListener('keydown', onLastItemKeydown);
    }
  });
}; // Класс CustomSelect


var CustomSelect = /*#__PURE__*/function () {
  function CustomSelect() {
    _classCallCheck(this, CustomSelect);

    window.selectInit = this.init.bind(this);
  }

  _createClass(CustomSelect, [{
    key: "setAction",
    value: function setAction(item) {
      setSelectAction(item);
    }
  }, {
    key: "createSelect",
    value: function createSelect(item) {
      createSelectStructure(item);
      return item;
    }
  }, {
    key: "init",
    value: function init() {
      var _this = this;

      var selects = document.querySelectorAll('[data-select]');
      selects.forEach(function (select) {
        if (!select.classList.contains('is-initialized')) {
          var newSelect = _this.createSelect(select);

          _this.setAction(newSelect);

          select.classList.add('is-initialized');
        }
      });
    }
  }]);

  return CustomSelect;
}();



/***/ }),

/***/ "./js/modules/form/form-validate.js":
/*!******************************************!*\
  !*** ./js/modules/form/form-validate.js ***!
  \******************************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "default", function() { return FormsValidate; });
function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); Object.defineProperty(Constructor, "prototype", { writable: false }); return Constructor; }

// Константы и переменные
var BASE_COUNTRY_CODE = '+7';
var BASE_MATRIX = '(___) ___ __ __';
var phoneLength = BASE_COUNTRY_CODE.length + BASE_MATRIX.length; // Ограничения ввода для обычных полей

var returnLimitationsRegEx = function returnLimitationsRegEx(dataLimitations) {
  switch (dataLimitations) {
    case 'digit':
      return /[^\d]/g;

    case 'name':
      return /[^a-zA-Zа-яёА-ЯЁ\-\s]/g;

    case 'letters':
      return /[^a-zA-Zа-яёА-ЯЁ\s]/g;

    case 'letters-and-digit':
      return /[^a-zA-Zа-яёА-ЯЁ\s\d]/g;

    case 'cyrillic':
      return /[^а-яёА-ЯЁ\s]/g;

    case 'latin':
      return /[^a-zA-Z\s]/g;

    default:
      return false;
  }
};

var simpleLimitations = function simpleLimitations(formElement, dataLimitations) {
  var RegEx = returnLimitationsRegEx(dataLimitations);

  if (RegEx) {
    formElement.addEventListener('input', function () {
      formElement.value = formElement.value.replace(RegEx, '');
    });
    return;
  } // eslint-disable-next-line no-console


  console.error("\u041F\u0435\u0440\u0435\u0434\u0430\u043D\u043D\u044B\u0439 \u0444\u043E\u0440\u043C\u0430\u0442 \u043E\u0433\u0440\u0430\u043D\u0438\u0447\u0435\u043D\u0438\u044F: ".concat(dataLimitations, ", \u043D\u0435 \u043F\u043E\u0434\u0434\u0435\u0440\u0436\u0438\u0432\u0430\u0435\u0442\u0441\u044F. \u041F\u0440\u043E\u0432\u0435\u0440\u044C\u0442\u0435 \u043A\u043E\u0440\u0440\u0435\u043A\u0442\u043D\u043E\u0441\u0442\u044C \u0432\u0432\u0435\u0434\u0451\u043D\u043D\u044B\u0445 \u0437\u043D\u0430\u0447\u0435\u043D\u0438\u0439 \u0432 \u0441\u043E\u043E\u0442\u0432\u0435\u0442\u0441\u0442\u0432\u0438\u0438 \u0441\u043E \u0441\u043F\u0435\u0446\u0438\u0444\u0438\u043A\u0430\u0446\u0438\u0435\u0439."));
}; // Ограничения ввода для обычных полей с матрицей


var returnMatrixLimitationsRegEx = function returnMatrixLimitationsRegEx(dataMatrixLimitations) {
  switch (dataMatrixLimitations) {
    case 'digit':
      return /[^\d]/g;

    case 'name':
      return /[^\а-яё\А-ЯЁ\a-z\A-Z\-]]/g;

    case 'letters':
      return /[^\а-яё\А-ЯЁ\a-z\A-Z]/g;

    case 'letters-and-digit':
      return /[^\а-яё\А-ЯЁ\a-z\A-Z\d]/g;

    case 'cyrillic':
      return /[^\а-яё\А-ЯЁ]/g;

    case 'latin':
      return /[^\a-z\A-Z]/g;

    default:
      return false;
  }
};

var initMatrixReplace = function initMatrixReplace(target, matrix, RegEx) {
  var def = matrix.replace(RegEx, '');
  var val = target.value.replace(RegEx, '');
  var i = 0;

  if (def.length >= val.length) {
    val = def;
  }

  target.value = matrix.replace(/./g, function (a) {
    if (/[_\^]/.test(a) && i < val.length) {
      return val.charAt(i++);
    } else if (i >= val.length) {
      return '';
    } else {
      return a;
    }
  });
};

var simpleMatrix = function simpleMatrix(formElement, dataMatrix, dataMatrixLimitations) {
  if (dataMatrixLimitations === null) {
    // eslint-disable-next-line no-console
    console.error('При валидации по матрице обязательно указывать формат ограничений: data-matrix-limitations=""');
    return;
  }

  var RegEx = returnMatrixLimitationsRegEx(dataMatrixLimitations);

  if (RegEx) {
    formElement.addEventListener('input', function () {
      initMatrixReplace(formElement, dataMatrix, RegEx);
    });
  } else {
    // eslint-disable-next-line no-console
    console.error("\u041F\u0435\u0440\u0435\u0434\u0430\u043D\u043D\u044B\u0439 \u0444\u043E\u0440\u043C\u0430\u0442 \u043E\u0433\u0440\u0430\u043D\u0438\u0447\u0435\u043D\u0438\u044F: ".concat(dataMatrixLimitations, ", \u043D\u0435 \u043F\u043E\u0434\u0434\u0435\u0440\u0436\u0438\u0432\u0430\u0435\u0442\u0441\u044F. \u041F\u0440\u043E\u0432\u0435\u0440\u044C\u0442\u0435 \u043A\u043E\u0440\u0440\u0435\u043A\u0442\u043D\u043E\u0441\u0442\u044C \u0432\u0432\u0435\u0434\u0451\u043D\u043D\u044B\u0445 \u0437\u043D\u0430\u0447\u0435\u043D\u0438\u0439 \u0432 \u0441\u043E\u043E\u0442\u0432\u0435\u0442\u0441\u0442\u0432\u0438\u0438 \u0441\u043E \u0441\u043F\u0435\u0446\u0438\u0444\u0438\u043A\u0430\u0446\u0438\u0435\u0439."));
  }
}; // Маска для телефона


var onInputPhoneInput = function onInputPhoneInput(_ref) {
  var target = _ref.target;
  var matrix = "".concat(BASE_COUNTRY_CODE).concat(BASE_MATRIX);
  var def = matrix.replace(/\D/g, '');
  var i = 0;
  var val = target.value.replace(/\D/g, '');

  if (def.length >= val.length) {
    val = def;
  }

  target.value = matrix.replace(/./g, function (a) {
    if (/[_\d]/.test(a) && i < val.length) {
      return val.charAt(i++);
    } else if (i >= val.length) {
      return '';
    } else {
      return a;
    }
  });
};

var prettifyPhoneInput = function prettifyPhoneInput(input) {
  if (!input.value.startsWith(BASE_COUNTRY_CODE)) {
    if (input.value.startsWith('8')) {
      input.value = input.value.replace('8', BASE_COUNTRY_CODE);
    } else {
      input.value = "".concat(BASE_COUNTRY_CODE).concat(input.value);
    }
  } // onInputPhoneInput({input});


  var matrix = "".concat(BASE_COUNTRY_CODE).concat(BASE_MATRIX);
  var def = matrix.replace(/\D/g, '');
  var i = 0;
  var val = input.value.replace(/\D/g, '');

  if (def.length >= val.length) {
    val = def;
  }

  input.value = matrix.replace(/./g, function (a) {
    if (/[_\d]/.test(a) && i < val.length) {
      return val.charAt(i++);
    } else if (i >= val.length) {
      return '';
    } else {
      return a;
    }
  });
};

var onFocusPhoneInput = function onFocusPhoneInput(_ref2) {
  var target = _ref2.target;

  if (!target.value) {
    target.value = BASE_COUNTRY_CODE;
  }

  target.addEventListener('input', onInputPhoneInput);
  target.addEventListener('blur', onBlurPhoneInput);
  target.addEventListener('keydown', onKeydownPhoneInput);
};

var onKeydownPhoneInput = function onKeydownPhoneInput(e) {
  if (e.target.selectionStart === 1 && e.keyCode === 8 || e.keyCode === 46) {
    e.preventDefault();
  }

  if (e.target.selectionStart <= phoneLength && e.keyCode !== 8 && e.keyCode !== 46 && e.keyCode !== 37 && e.keyCode !== 39) {
    e.target.setSelectionRange(phoneLength, phoneLength);
  }
};

var onBlurPhoneInput = function onBlurPhoneInput(_ref3) {
  var target = _ref3.target;

  if (target.value === BASE_COUNTRY_CODE) {
    var parent = target.closest('[data-validate-type="phone"]');
    target.value = '';
    parent.classList.remove('not-empty');
    target.removeEventListener('input', onInputPhoneInput);
    target.removeEventListener('blur', onBlurPhoneInput);
  }
}; // Показ ошибок полей форм


var hideError = function hideError(el) {
  if (el.classList.contains('toggle-group')) {
    validateToggleGroup(el);
    el.setAttribute('aria-invalid', 'true');
    el.classList.remove('is-invalid');
    el.classList.add('is-valid');
  } else {
    var parent = el.closest('[data-validate-type]');
    el.setAttribute('aria-invalid', 'false');
    parent.classList.remove('is-invalid');
    parent.classList.add('is-valid');
  }
};

var showError = function showError(el) {
  if (el.classList.contains('toggle-group')) {
    validateToggleGroup(el);
    el.setAttribute('aria-invalid', 'false');
    el.classList.add('is-invalid');
    el.classList.remove('is-valid');
  } else {
    var parent = el.closest('[data-validate-type]');
    el.setAttribute('aria-invalid', 'true');
    parent.classList.add('is-invalid');
    parent.classList.remove('is-valid');
  }
};

var showInputsError = function showInputsError(inputs) {
  var flag = true;
  var result = true;
  inputs.forEach(function (input) {
    var type = input.closest('[data-validate-type]').dataset.validateType;

    if (type === 'toggle-group') {
      return;
    }

    flag = validateInputs(type, input);

    if (!flag) {
      result = flag;
      showError(input);
    } else {
      hideError(input);
    }
  });
  return result;
};

var showGroupInputsError = function showGroupInputsError(parents) {
  var flag = true;
  var result = true;

  if (!parents.length) {
    return result;
  }

  parents.forEach(function (parent) {
    flag = validateToggleGroup(parent);

    if (!flag) {
      result = flag;
      showError(parent);
    } else {
      hideError(parent);
    }
  });
  return result;
};

var showErrors = function showErrors(inputs, parents) {
  var result = true;
  var inputsResult = showInputsError(inputs);
  var groupResult = showGroupInputsError(parents);

  if (!inputsResult || !groupResult) {
    result = false;
  }

  return result;
}; // Валидация полей форм


var validateTextInput = function validateTextInput(input) {
  var parent = input.closest('[data-validate-type]');
  var flag = true;
  var minLength = +input.getAttribute('minlength');

  if (!minLength) {
    minLength = 1;
  }

  if (input.value.length >= minLength) {
    parent.classList.add('is-valid');
    parent.classList.remove('is-invalid');
    input.setAttribute('aria-invalid', 'false');
  } else {
    parent.classList.remove('is-valid');
    input.setAttribute('aria-invalid', 'true');
    flag = false;
  }

  return flag;
};

var validatePhoneInput = function validatePhoneInput(input) {
  var parent = input.closest('[data-validate-type]');
  var flag = true;

  if (input.value.length >= phoneLength) {
    parent.classList.remove('is-invalid');
    parent.classList.add('is-valid');
    input.setAttribute('aria-invalid', 'false');
  } else {
    parent.classList.remove('is-valid');
    input.setAttribute('aria-invalid', 'true');
    flag = false;
  }

  return flag;
};

var validateEmailInput = function validateEmailInput(input) {
  var parent = input.closest('[data-validate-type]');
  var flag = true;
  var emailString = /[a-zA-Zа-яёА-ЯЁ0-9]{1}([a-zA-Zа-яёА-ЯЁ0-9\-_\.]{1,})?@[a-zA-Zа-яёА-ЯЁ0-9\-]{1}([a-zA-Zа-яёА-ЯЁ0-9.\-]{1,})?[a-zA-Zа-яёА-ЯЁ0-9\-]{1}\.[a-zA-Zа-яёА-ЯЁ]{2,6}/;
  var regEmail = new RegExp(emailString, '');

  if (regEmail.test(input.value)) {
    parent.classList.remove('is-invalid');
    parent.classList.add('is-valid');
    input.setAttribute('aria-invalid', 'false');
  } else {
    parent.classList.remove('is-valid');
    input.setAttribute('aria-invalid', 'true');
    flag = false;
  }

  return flag;
};

var validateMatrixInput = function validateMatrixInput(input) {
  var parent = input.closest('[data-validate-type]');
  var flag = true;
  var matrix = input.closest('[data-matrix]').dataset.matrix;

  if (input.value.length === matrix.length) {
    parent.classList.remove('is-invalid');
    parent.classList.add('is-valid');
    input.setAttribute('aria-invalid', 'false');
  } else {
    parent.classList.remove('is-valid');
    input.setAttribute('aria-invalid', 'true');
    flag = false;
  }

  return flag;
};

var findSelectedOption = function findSelectedOption(options) {
  var flag = false;
  options.forEach(function (option) {
    if (option.value && option.selected) {
      flag = true;
    }
  });
  return flag;
};

var validateSelect = function validateSelect(input) {
  var parent = input.closest('[data-validate-type]');
  var options = input.querySelectorAll('option');
  var customSelectText = parent.querySelector('.custom-select__text');
  input.setAttribute('aria-invalid', 'false');
  var flag = true;

  if (findSelectedOption(options)) {
    parent.classList.remove('is-invalid');
    parent.classList.add('is-valid');
    input.setAttribute('aria-invalid', 'false');
  } else {
    parent.classList.remove('is-valid');
    input.setAttribute('aria-invalid', 'true');
    customSelectText.innerHTML = '';
    parent.classList.remove('not-empty');
    flag = false;
  }

  return flag;
};

var validateCheckbox = function validateCheckbox(input) {
  var parent = input.closest('[data-validate-type]');
  var flag = true;

  if (input.checked) {
    parent.classList.remove('is-invalid');
    parent.classList.add('is-valid');
  } else {
    parent.classList.remove('is-valid');
    flag = false;
  }

  return flag;
};

var validateInputs = function validateInputs(type, input) {
  switch (type) {
    case 'text':
      return validateTextInput(input);

    case 'phone':
      return validatePhoneInput(input);

    case 'email':
      return validateEmailInput(input);

    case 'matrix':
      return validateMatrixInput(input);

    case 'select':
      return validateSelect(input);

    case 'checkbox':
      return validateCheckbox(input);

    default:
      return false;
  }
};

var returnCheckedElements = function returnCheckedElements(inputs) {
  var flag = false;
  inputs.forEach(function (input) {
    if (input.checked) {
      flag = true;
    }
  });
  return flag;
};

var removeGroupAria = function removeGroupAria(inputs) {
  inputs.forEach(function (input) {
    if (!input.checked) {
      input.removeAttribute('aria-required');
      input.removeAttribute('aria-invalid');
    } else {
      input.setAttribute('aria-required', true);
      input.setAttribute('aria-invalid', false);
    }
  });
};

var setGroupAria = function setGroupAria(inputs) {
  inputs.forEach(function (input) {
    input.setAttribute('aria-required', true);
    input.setAttribute('aria-invalid', true);
  });
};

var validateToggleGroup = function validateToggleGroup(parent) {
  var formElements = parent.querySelectorAll('input');
  var flag = true;

  if (returnCheckedElements(formElements)) {
    removeGroupAria(formElements);
    parent.classList.remove('is-invalid');
    parent.classList.add('is-valid');
  } else {
    setGroupAria(formElements);
    parent.classList.remove('is-valid');
    flag = false;
  }

  return flag;
};

var checkInputValidity = function checkInputValidity(type, input) {
  validateInputs(type, input);
}; // Установка всех действий в полях форм


var formElementLimitationsAction = function formElementLimitationsAction(formValidateElement) {
  var dataLimitations = formValidateElement.dataset.limitations ? formValidateElement.dataset.limitations : null;
  var formElement = formValidateElement.querySelector('input');

  if (!formElement) {
    formElement = formValidateElement.querySelector('textarea');
  }

  if (!formElement) {
    // eslint-disable-next-line no-console
    console.error('В валидируемом блоке отсутствует поле формы');
    return;
  }

  if (dataLimitations) {
    simpleLimitations(formElement, dataLimitations);
  }
};

var formElementMatrixAction = function formElementMatrixAction(formValidateElement) {
  var dataMatrix = formValidateElement.dataset.matrix ? formValidateElement.dataset.matrix : null;
  var dataMatrixLimitations = formValidateElement.dataset.matrixLimitations ? formValidateElement.dataset.matrixLimitations : null;
  var formElement = formValidateElement.querySelector('input');

  if (!formElement) {
    formElement = formValidateElement.querySelector('textarea');
  }

  if (!formElement) {
    // eslint-disable-next-line no-console
    console.error('В валидируемом блоке отсутствует поле формы');
    return;
  }

  if (dataMatrix) {
    simpleMatrix(formElement, dataMatrix, dataMatrixLimitations);
  }
};

var formElementValidateAction = function formElementValidateAction(formValidateElement) {
  var dataValidateType = formValidateElement.dataset.validateType;
  var dataLimitations = formValidateElement.dataset.limitations ? formValidateElement.dataset.limitations : null;
  var dataMatrix = formValidateElement.dataset.matrix ? formValidateElement.dataset.matrix : null;
  var dataMatrixLimitations = formValidateElement.dataset.matrixLimitations ? formValidateElement.dataset.matrixLimitations : null;

  if (dataValidateType !== 'toggle-group') {
    var formElement = formValidateElement.querySelector('input');

    if (!formElement) {
      formElement = formValidateElement.querySelector('textarea');
    }

    if (!formElement) {
      formElement = formValidateElement.querySelector('select');
    }

    if (!formElement) {
      // eslint-disable-next-line no-console
      console.error('В валидируемом блоке отсутствует поле формы');
      return;
    }

    formElement.setAttribute('aria-required', true);
    formElement.setAttribute('aria-invalid', true);

    if (dataLimitations) {
      simpleLimitations(formElement, dataLimitations);
    }

    if (dataMatrix) {
      simpleMatrix(formElement, dataMatrix, dataMatrixLimitations);
    }

    if (dataValidateType === 'phone') {
      if (formElement.value) {
        prettifyPhoneInput(formElement);
      }

      formElement.addEventListener('focus', onFocusPhoneInput);
    }

    formElement.addEventListener('input', function () {
      checkInputValidity(dataValidateType, formElement);
    });
    checkInputValidity(dataValidateType, formElement);
  } else {
    var formElements = formValidateElement.querySelectorAll('input');

    if (formElements.length) {
      formElements.forEach(function (el) {
        el.setAttribute('aria-required', true);
        el.setAttribute('aria-invalid', true);
        el.addEventListener('input', function () {
          validateToggleGroup(formValidateElement);
        });
      });
      validateToggleGroup(formValidateElement);
    } else {
      // eslint-disable-next-line no-console
      console.error('В валидируемом блоке отсутствуют поля формы');
      return;
    }
  }
}; // Обработка события submit на форме


var onFormSubmit = function onFormSubmit(e, callback) {
  var formElements = e.target.querySelectorAll('[aria-required="true"]');
  var groupsFormElement = e.target.querySelectorAll('[data-validate-type="toggle-group"]');

  if (showErrors(formElements, groupsFormElement) && callback && callback.validationSuccessCallback) {
    callback.validationSuccessCallback(e);
  } else if (callback && callback.validationErrorCallback) {
    callback.validationErrorCallback(e);
  } else {
    e.preventDefault();
  }
}; // Очистка полей формы


var clearForm = function clearForm(form) {
  form.reset();
  var formValidateElements = form.querySelectorAll('[data-validate-type]');
  var notEmptyInputs = form.querySelectorAll('.not-empty');
  var invalidInputs = form.querySelectorAll('.is-invalid');
  notEmptyInputs.forEach(function (notEmptyInput) {
    notEmptyInput.classList.remove('not-empty');
  });
  invalidInputs.forEach(function (invalidInput) {
    invalidInput.classList.remove('is-invalid');
  });
  formValidateElements.forEach(function (formValidateElement) {
    var dataValidateType = formValidateElement.dataset.validateType;

    if (dataValidateType !== 'toggle-group') {
      var formElement = formValidateElement.querySelector('input');

      if (!formElement) {
        formElement = formValidateElement.querySelector('textarea');
      }

      if (!formElement) {
        formElement = formValidateElement.querySelector('select');
      }

      if (!formElement) {
        // eslint-disable-next-line no-console
        console.error('В валидируемом блоке отсутствует поле формы');
        return;
      }

      formElement.value = '';
      checkInputValidity(dataValidateType, formElement);
    } else {
      validateToggleGroup(formValidateElement);
    }
  });
};

window.clearForm = clearForm; // Класс FormsValidate

var FormsValidate = /*#__PURE__*/function () {
  function FormsValidate(wrappers) {
    var callback = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};

    _classCallCheck(this, FormsValidate);

    this.wrappers = wrappers;
    this.callback = callback;
  }

  _createClass(FormsValidate, [{
    key: "init",
    value: function init(formWrappers) {
      var _this = this;

      if (!formWrappers) {
        formWrappers = this.wrappers;
      }

      var typeOfNode = Object.prototype.toString.call(formWrappers);

      if (typeOfNode === '[object HTMLCollection]' || typeOfNode === '[object NodeList]' || typeOfNode === '[object Array]') {
        formWrappers.forEach(function (wrapper) {
          if (wrapper.classList.contains('is-initialized')) {
            // eslint-disable-next-line no-console
            console.error('На данной форме валидация уже инициализированна');
          } else {
            _this.initItem(wrapper);
          }
        });
      } else if (typeOfNode === '[object HTMLDivElement]' || typeOfNode === '[object HTMLElement]') {
        if (!formWrappers.classList.contains('is-initialized')) {
          this.initItem(formWrappers);
        }
      } else {
        // eslint-disable-next-line no-console
        console.error('Переданный обьект не соответствует формату');
        return;
      }
    }
  }, {
    key: "initItem",
    value: function initItem(element) {
      var _this2 = this;

      element.classList.add('is-initialized');
      var form = element.querySelector('form');
      var resetButtons = form.querySelectorAll('button[type="reset"], [data-reset]');
      form.noValidate = true;
      form.addEventListener('submit', function (e) {
        onFormSubmit(e, _this2.callback);
      });

      if (resetButtons.length) {
        resetButtons.forEach(function (btn) {
          btn.addEventListener('click', function (e) {
            e.preventDefault();
            clearForm(form);
          });
        });
      }

      var formValidateElements = form.querySelectorAll('[data-validate-type]');
      var formLimitationsElements = form.querySelectorAll('[data-limitations]:not([data-validate-type])');
      var formMatrixElements = form.querySelectorAll('[data-matrix]:not([data-validate-type])');

      if (formValidateElements.length) {
        formValidateElements.forEach(function (el) {
          formElementValidateAction(el);
        });
      }

      if (formLimitationsElements.length) {
        formLimitationsElements.forEach(function (el) {
          formElementLimitationsAction(el);
        });
      }

      if (formMatrixElements.length) {
        formMatrixElements.forEach(function (el) {
          formElementMatrixAction(el);
        });
      }
    }
  }]);

  return FormsValidate;
}();


window.FormsValidate = FormsValidate;

/***/ }),

/***/ "./js/modules/form/init-custom-select.js":
/*!***********************************************!*\
  !*** ./js/modules/form/init-custom-select.js ***!
  \***********************************************/
/*! exports provided: initCustomSelect */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "initCustomSelect", function() { return initCustomSelect; });
/* harmony import */ var _custom_select__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./custom-select */ "./js/modules/form/custom-select.js");


var initCustomSelect = function initCustomSelect() {
  var customSelect = new _custom_select__WEBPACK_IMPORTED_MODULE_0__["default"]();
  customSelect.init();
};



/***/ }),

/***/ "./js/modules/form/init-feedback-submit.js":
/*!*************************************************!*\
  !*** ./js/modules/form/init-feedback-submit.js ***!
  \*************************************************/
/*! exports provided: onFeedbackFormSubmit */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "onFeedbackFormSubmit", function() { return onFeedbackFormSubmit; });
/* harmony import */ var _modals_init_modals__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../modals/init-modals */ "./js/modules/modals/init-modals.js");

var feedbackBtn = document.querySelector('.contacts-feedback__submit-btn');
var subscribeBtn = document.querySelector('.subscribe__button');

var onFeedbackFormSubmit = function onFeedbackFormSubmit(evt) {
  if (!feedbackBtn & !subscribeBtn) {
    return;
  }

  evt.preventDefault();
  setTimeout(function () {
    _modals_init_modals__WEBPACK_IMPORTED_MODULE_0__["modals"].open('feedback-success');
  }, 400);
  setTimeout(function () {
    window.clearForm(evt.target);
  }, 1000);
};



/***/ }),

/***/ "./js/modules/form/init-form-validate.js":
/*!***********************************************!*\
  !*** ./js/modules/form/init-form-validate.js ***!
  \***********************************************/
/*! exports provided: initFormValidate */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "initFormValidate", function() { return initFormValidate; });
/* harmony import */ var _form_validate__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./form-validate */ "./js/modules/form/form-validate.js");
/* harmony import */ var _init_feedback_submit__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./init-feedback-submit */ "./js/modules/form/init-feedback-submit.js");


var formWrappers = document.querySelectorAll('[data-validate]');

var resetForm = function resetForm(form) {
  setTimeout(function () {
    window.clearForm(form);
  }, 1000);
};

var baseValidationSuccessCallback = function baseValidationSuccessCallback(e) {
  e.preventDefault(); // В данном колбеке бэкендер будет писать запрос на отправку формы на сервер и обрабатывать возможные ошибки при отправке

  resetForm(e.target);
};

var baseValidationErrorCallback = function baseValidationErrorCallback(e) {
  e.preventDefault();
};

var customExampleValidationSuccessCallback = function customExampleValidationSuccessCallback(e) {
  e.preventDefault(); // В данном колбеке бэкендер будет писать запрос на отправку формы на сервер и обрабатывать возможные ошибки при отправке

  resetForm(e.target); // eslint-disable-next-line no-console

  console.log('Ваша форма успешна отправлена');
};

var customExampleValidationErrorCallback = function customExampleValidationErrorCallback(e) {
  e.preventDefault(); // eslint-disable-next-line no-console

  console.error('Отправка формы невозможна, заполните все обязательные поля');
};

var callbacks = {
  base: {
    // Колбек при успешной валидации формы при попытке её отправки
    validationSuccessCallback: baseValidationSuccessCallback,
    // Колбек при не успешной валидации формы при попытке её отправки, не связан с запросами на сервер
    validationErrorCallback: baseValidationErrorCallback
  },
  customExample: {
    validationSuccessCallback: customExampleValidationSuccessCallback,
    validationErrorCallback: customExampleValidationErrorCallback
  },
  feedbackFormSubmit: {
    validationSuccessCallback: _init_feedback_submit__WEBPACK_IMPORTED_MODULE_1__["onFeedbackFormSubmit"]
  }
};

var setCustomPhoneInputsEvent = function setCustomPhoneInputsEvent() {
  if (document.querySelectorAll('[data-validate-type="phone"] input').length) {
    document.querySelector('html').addEventListener('input', function (_ref) {
      var target = _ref.target;

      if (target.closest('[data-validate-type="phone"]')) {
        target.closest('[data-validate-type="phone"]').querySelector('input').dispatchEvent(new Event('input'));
      }
    });
  }
};

var initFormValidate = function initFormValidate() {
  if (formWrappers.length) {
    setCustomPhoneInputsEvent();
    formWrappers.forEach(function (wrapper) {
      var callback = wrapper.dataset.callback;

      if (!callback) {
        callback = 'base';
      }

      var formValidate = new _form_validate__WEBPACK_IMPORTED_MODULE_0__["default"](wrapper, callbacks[callback]);
      return formValidate.init();
    });
  }
};



/***/ }),

/***/ "./js/modules/header/init-header.js":
/*!******************************************!*\
  !*** ./js/modules/header/init-header.js ***!
  \******************************************/
/*! exports provided: initHeader */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "initHeader", function() { return initHeader; });
var initHeader = function initHeader() {
  var header = document.querySelector('.header');

  if (!header) {
    return;
  }

  header.classList.add('header--top');
  var delta = header.classList.contains('header--main') ? window.innerHeight : 10;
  var lastScrollTop = window.pageYOffset || document.documentElement.scrollTop;
  document.addEventListener('scroll', function () {
    header.classList.toggle('is-fixed', window.pageYOffset > delta);
    var st = window.pageYOffset || document.documentElement.scrollTop;

    if (st > lastScrollTop) {
      // downscroll code
      if (window.pageYOffset > 50) {
        header.classList.remove('header--top');
      }
    } else {
      header.classList.add('header--top');
    }

    lastScrollTop = st <= 0 ? 0 : st;
  });
};



/***/ }),

/***/ "./js/modules/header/init-menu.js":
/*!****************************************!*\
  !*** ./js/modules/header/init-menu.js ***!
  \****************************************/
/*! exports provided: initMenu */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "initMenu", function() { return initMenu; });
var breakpoint = window.matchMedia('(min-width:768px)');

var initMenu = function initMenu() {
  var menuBtn = document.querySelector('[data-menu-btn]');
  var mainNav = document.querySelector('.main-nav');
  var wrapper = document.querySelector('.wrapper');
  var header = document.querySelector('.header__inner');
  var main = document.querySelector('main');
  var footer = document.querySelector('.footer');

  if (!menuBtn && !mainNav) {
    return;
  }

  var breakpointChecker = function breakpointChecker() {
    menuBtn.addEventListener('click', function (evt) {
      evt.preventDefault();

      if (wrapper.classList.contains('is-menu-active')) {
        wrapper.classList.remove('is-menu-active');
        window.scrollLock.enableScrolling();

        if (breakpoint.matches) {
          mainNav.style.transform = null;
          header.style.transform = null;
          main.style.transform = null;
          footer.style.transform = null;
        }
      } else {
        var menuWidth = mainNav.clientWidth;
        var scrollBarWidth = window.innerWidth - document.documentElement.clientWidth;
        var transform = menuWidth - scrollBarWidth;
        wrapper.classList.add('is-menu-active');
        window.scrollLock.disableScrolling();

        if (breakpoint.matches) {
          mainNav.style.transform = "translateX(-".concat(menuWidth, "px)");
          header.style.transform = "translate(-".concat(menuWidth, "px, 0)");
          main.style.transform = "translateX(-".concat(transform, "px)");
          footer.style.transform = "translateX(-".concat(transform, "px)");
        }
      }
    });
  };

  breakpoint.addListener(breakpointChecker);
  breakpointChecker();
};



/***/ }),

/***/ "./js/modules/header/set-header-height.js":
/*!************************************************!*\
  !*** ./js/modules/header/set-header-height.js ***!
  \************************************************/
/*! exports provided: setHeaderHeight */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "setHeaderHeight", function() { return setHeaderHeight; });
/* harmony import */ var _vendor_resize_observer_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../vendor/resize-observer.js */ "./js/vendor/resize-observer.js");
/* harmony import */ var _vendor_resize_observer_js__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(_vendor_resize_observer_js__WEBPACK_IMPORTED_MODULE_0__);
function _createForOfIteratorHelper(o, allowArrayLike) { var it = typeof Symbol !== "undefined" && o[Symbol.iterator] || o["@@iterator"]; if (!it) { if (Array.isArray(o) || (it = _unsupportedIterableToArray(o)) || allowArrayLike && o && typeof o.length === "number") { if (it) o = it; var i = 0; var F = function F() {}; return { s: F, n: function n() { if (i >= o.length) return { done: true }; return { done: false, value: o[i++] }; }, e: function e(_e) { throw _e; }, f: F }; } throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); } var normalCompletion = true, didErr = false, err; return { s: function s() { it = it.call(o); }, n: function n() { var step = it.next(); normalCompletion = step.done; return step; }, e: function e(_e2) { didErr = true; err = _e2; }, f: function f() { try { if (!normalCompletion && it.return != null) it.return(); } finally { if (didErr) throw err; } } }; }

function _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === "string") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === "Object" && o.constructor) n = o.constructor.name; if (n === "Map" || n === "Set") return Array.from(o); if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }

function _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }


var ResizeObserverCurrent = window.ResizeObserver ? window.ResizeObserver : _vendor_resize_observer_js__WEBPACK_IMPORTED_MODULE_0__["ResizeObserver"];
var body = document.querySelector('body');
var header = document.querySelector('.header__inner');

var setHeaderHeight = function setHeaderHeight() {
  if (!header) {
    return;
  }

  var headerHeight = header.offsetHeight;
  body.style.setProperty('--header-height', headerHeight + 'px');
  var ro = new ResizeObserverCurrent(function (entries) {
    var _iterator = _createForOfIteratorHelper(entries),
        _step;

    try {
      for (_iterator.s(); !(_step = _iterator.n()).done;) {
        var entry = _step.value;
        var newHeight = entry.contentRect ? entry.contentRect.height : entry.contentBoxSize.blockSize;

        if (headerHeight !== newHeight) {
          body.style.setProperty('--header-height', newHeight + 'px');
          headerHeight = newHeight;
        }
      }
    } catch (err) {
      _iterator.e(err);
    } finally {
      _iterator.f();
    }
  });
  ro.observe(header);
};



/***/ }),

/***/ "./js/modules/init-contacts-city.js":
/*!******************************************!*\
  !*** ./js/modules/init-contacts-city.js ***!
  \******************************************/
/*! exports provided: initContactsCity */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "initContactsCity", function() { return initContactsCity; });
var cityItems = document.querySelectorAll('[data-city-item]');
var citiTabsControl = document.querySelector('[data-city-controls]');
var cityContactsHeader = document.querySelector('[data-city-tabs] [data-city-header]');

var initMapCity = function initMapCity() {
  var _loop = function _loop(i) {
    var buttonLocation = cityItems[i].querySelector('[data-city-location]');
    buttonLocation.addEventListener('click', function (evt) {
      evt.preventDefault();

      if (cityItems[i].classList.contains('is-hidden')) {
        cityItems[i].classList.remove('is-hidden');

        if (citiTabsControl) {
          setTimeout(function () {
            citiTabsControl.classList.remove('is-hidden');
          }, 500);
        }

        if (cityContactsHeader) {
          setTimeout(function () {
            cityContactsHeader.classList.remove('is-hidden');
          }, 500);
        }
      } else {
        cityItems[i].classList.add('is-hidden');

        if (citiTabsControl) {
          citiTabsControl.classList.add('is-hidden');
        }

        if (cityContactsHeader) {
          cityContactsHeader.classList.add('is-hidden');
        }
      }
    });
  };

  for (var i = 0; i < cityItems.length; i++) {
    _loop(i);
  }
};

var initCityVideo = function initCityVideo() {
  var _loop2 = function _loop2(i) {
    var cityVideo = cityItems[i].querySelector('[data-city-video]');
    cityVideo.addEventListener('loadedmetadata', function () {
      cityItems[i].addEventListener('mouseenter', function () {
        cityVideo.play();
      });
      cityItems[i].addEventListener('mouseleave', function () {
        cityVideo.pause();
      });
    });
  };

  for (var i = 0; i < cityItems.length; i++) {
    _loop2(i);
  }
};

var initTabsCity = function initTabsCity() {
  var cityNavButtons = document.querySelectorAll('[data-city-nav]');
  cityNavButtons.forEach(function (buttonNav) {
    buttonNav.addEventListener('click', function () {
      var array = Array.from(cityNavButtons);
      var index = array.indexOf(buttonNav);
      array.forEach(function (button, i) {
        if (i === index) {
          button.classList.add('is-active');

          for (var j = 0; j < cityItems.length; j++) {
            if (i === j) {
              cityItems[j].classList.add('is-active');
            } else {
              cityItems[j].classList.remove('is-active');
            }
          }
        } else {
          button.classList.remove('is-active');
        }
      });
    });
  });
};

var initContactsCity = function initContactsCity() {
  if (!cityItems.length) {
    return;
  }

  initCityVideo();
  initMapCity();
  initTabsCity();
};



/***/ }),

/***/ "./js/modules/init-description-text.js":
/*!*********************************************!*\
  !*** ./js/modules/init-description-text.js ***!
  \*********************************************/
/*! exports provided: initDescriptionText */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "initDescriptionText", function() { return initDescriptionText; });
var descriptionSections = document.querySelectorAll('[data-description="section"]');
var breakpointMD = window.matchMedia('(max-width:1023px)');

var initDescriptionText = function initDescriptionText() {
  if (!descriptionSections.length) {
    return;
  }

  var _loop = function _loop(i) {
    var descriptionContent = descriptionSections[i].querySelector('[data-description="content"]');
    var textItems = descriptionSections[i].querySelectorAll('[data-description="text"]');
    var buttonText = descriptionSections[i].querySelector('[data-description="button"]');

    var breakpointChecker = function breakpointChecker() {
      if (breakpointMD.matches) {
        if (textItems.length > 1) {
          buttonText.classList.remove('is-hidden');

          var _loop2 = function _loop2(j) {
            textItems[j].classList.add('is-hidden');
            buttonText.addEventListener('click', function () {
              if (textItems[j].classList.contains('is-hidden')) {
                textItems[j].classList.remove('is-hidden');
                descriptionContent.classList.add('is-active');
              } else {
                textItems[j].classList.add('is-hidden');
                descriptionContent.classList.remove('is-active');
              }
            });
          };

          for (var j = 1; j < textItems.length; j++) {
            _loop2(j);
          }
        } else {
          buttonText.classList.add('is-hidden');
        }
      } else {
        for (var _j = 1; _j < textItems.length; _j++) {
          textItems[_j].classList.remove('is-hidden');
        }
      }
    };

    breakpointMD.addListener(breakpointChecker);
    breakpointChecker();
  };

  for (var i = 0; i < descriptionSections.length; i++) {
    _loop(i);
  }
};



/***/ }),

/***/ "./js/modules/init-first-load.js":
/*!***************************************!*\
  !*** ./js/modules/init-first-load.js ***!
  \***************************************/
/*! exports provided: initFirstLoad */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "initFirstLoad", function() { return initFirstLoad; });
var initFirstLoad = function initFirstLoad() {
  var wrapper = document.querySelector('.wrapper');

  if (!wrapper) {
    return;
  }

  wrapper.classList.add('is-loaded');
};



/***/ }),

/***/ "./js/modules/init-intro-video.js":
/*!****************************************!*\
  !*** ./js/modules/init-intro-video.js ***!
  \****************************************/
/*! exports provided: initIntroVideo, modalVideoClose */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "initIntroVideo", function() { return initIntroVideo; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "modalVideoClose", function() { return modalVideoClose; });
var breakpoint = window.matchMedia('(min-width:768px)');
var SCALE = 2.9;

var modalVideoClose = function modalVideoClose() {
  var wrapper = document.querySelector('.wrapper');
  var videoWrp = document.querySelector('.intro__video-wrp');

  if (wrapper.classList.contains('is-video-open')) {
    wrapper.classList.remove('is-video-open');
    videoWrp.style.transform = null;
  }
};

var initIntroVideo = function initIntroVideo() {
  var videoBtn = document.querySelector('[data-open-modal="video"]');
  var modalContent = document.querySelector('.modal--video .modal__content');
  var videoWrp = document.querySelector('.intro__video-wrp');
  var wrapper = document.querySelector('.wrapper');

  if (!videoBtn) {
    return;
  }

  var breakpointChecker = function breakpointChecker() {
    videoBtn.addEventListener('click', function (evt) {
      evt.preventDefault();
      var videoBottom = (document.documentElement.clientHeight - videoWrp.getBoundingClientRect().bottom) / SCALE;
      var videoWidth = videoWrp.getBoundingClientRect().width;
      var videoHeight = videoWrp.getBoundingClientRect().height;

      if (breakpoint.matches) {
        var width = window.innerWidth - document.documentElement.clientWidth;
        var koefX = -document.documentElement.clientWidth / 2 / SCALE;
        var koefY = -document.documentElement.clientHeight / 2 / SCALE;
        var videoX = koefX + videoWidth / 2;
        var videoY = koefY + videoHeight / 2;
        modalContent.style.width = width + 1 + 'px';

        if (!wrapper.classList.contains('is-video-open')) {
          wrapper.classList.add('is-video-open');
          videoWrp.style.transform = "scale(".concat(SCALE, ") translate(").concat(videoX, "px, ").concat(videoY + videoBottom, "px)");
        }
      }
    });
  };

  breakpoint.addListener(breakpointChecker);
  breakpointChecker();
};



/***/ }),

/***/ "./js/modules/init-move-to.js":
/*!************************************!*\
  !*** ./js/modules/init-move-to.js ***!
  \************************************/
/*! exports provided: initMoveTo, initMoveToBlock */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "initMoveTo", function() { return initMoveTo; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "initMoveToBlock", function() { return initMoveToBlock; });
/* harmony import */ var _vendor_moveTo__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../vendor/moveTo */ "./js/vendor/moveTo.js");

var body = document.querySelector('body');
var moveTo = new _vendor_moveTo__WEBPACK_IMPORTED_MODULE_0__["MoveTo"]({
  tolerance: body.style.getPropertyValue('--headerHeight').slice(0, -2),
  duration: 1000
});

var initMoveTo = function initMoveTo() {
  var triggers = document.querySelectorAll('[data-move-to]');
  triggers.forEach(function (trigger) {
    moveTo.options.tolerance = body.style.getPropertyValue('--headerHeight').slice(0, -2);
    trigger.addEventListener('click', function () {
      if (!trigger.closest('.team-slider__slide')) {
        initMoveToBlock(trigger);
      }
    });
  });
};

var initMoveToBlock = function initMoveToBlock(clickEl, delayTime) {
  setTimeout(function () {
    var target = document.querySelector(clickEl.dataset.moveTo);
    moveTo.move(target);
  }, delayTime ? delayTime : 0);
};



/***/ }),

/***/ "./js/modules/init-running-line.js":
/*!*****************************************!*\
  !*** ./js/modules/init-running-line.js ***!
  \*****************************************/
/*! exports provided: initRunningLine */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "initRunningLine", function() { return initRunningLine; });
var runningLines = document.querySelectorAll('[data-running-line]');
var swiper;

var enableSwiper = function enableSwiper(slider) {
  swiper = new Swiper(slider, {
    speed: 5000,
    loop: true,
    autoplay: {
      delay: 1,
      disableOnInteraction: false
    },
    slidesPerView: 'auto',
    allowTouchMove: false,
    watchOverflow: true
  });
};

var initRunningLine = function initRunningLine() {
  if (!runningLines.length) {
    return;
  }

  for (var i = 0; i < runningLines.length; i++) {
    enableSwiper(runningLines[i]);
  }
};



/***/ }),

/***/ "./js/modules/init-scroll-btn.js":
/*!***************************************!*\
  !*** ./js/modules/init-scroll-btn.js ***!
  \***************************************/
/*! exports provided: initScrollBtn */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "initScrollBtn", function() { return initScrollBtn; });
/* harmony import */ var _utils_scroll_to__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../utils/scroll-to */ "./js/utils/scroll-to.js");


var initScrollBtn = function initScrollBtn() {
  var scrollBtns = document.querySelectorAll('.scroll-btn');

  if (!scrollBtns.length) {
    return;
  }

  scrollBtns.forEach(function (btn) {
    btn.addEventListener('click', function (e) {
      e.preventDefault();
      var target = document.querySelector(btn.dataset.target);

      if (target) {
        var elementPosition = target.getBoundingClientRect().top;
        var offsetPosition = elementPosition + window.pageYOffset;
        Object(_utils_scroll_to__WEBPACK_IMPORTED_MODULE_0__["scrollToWithDuration"])(offsetPosition, 1000);
      }
    });
  });
};



/***/ }),

/***/ "./js/modules/init-tender-b2b.js":
/*!***************************************!*\
  !*** ./js/modules/init-tender-b2b.js ***!
  \***************************************/
/*! exports provided: initTenderB2b */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "initTenderB2b", function() { return initTenderB2b; });
var initTenderB2b = function initTenderB2b() {
  var id = 'b2b-center-market-js';

  if (document.getElementById(id)) {
    return;
  }

  var script = document.createElement('script');
  script.src = '//www.b2b-center.ru/js/public/iframe.js';
  script.id = id;
  script.charset = 'utf-8';
  script.type = 'text/javascript';
  document.getElementsByTagName('head')[0].appendChild(script);
};



/***/ }),

/***/ "./js/modules/init-video-control.js":
/*!******************************************!*\
  !*** ./js/modules/init-video-control.js ***!
  \******************************************/
/*! exports provided: controlVideo */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "controlVideo", function() { return controlVideo; });
var videoInterviewWrapper = document.querySelector('[data-video-interview-container]');

var controlVideo = function controlVideo() {
  if (!videoInterviewWrapper) {
    return;
  }

  var video;
  video = videoInterviewWrapper.querySelector('[data-video-interview]');
  var videoDurationText = videoInterviewWrapper.querySelector('[data-video-duration]');
  var timeCodes = videoInterviewWrapper.querySelectorAll('[data-video-timecode]');
  video.addEventListener('loadedmetadata', function () {
    var duration = video.duration;
    var minutes = Math.floor(duration / 60);
    var second = Math.floor(duration % 60);
    videoDurationText.textContent = "".concat(minutes, ":").concat(second);

    for (var i = 0; i < timeCodes.length; i++) {
      var timeCode = timeCodes[i].dataset.videoTimecode;
      var timeCodeMinutes = Math.floor(timeCode / 60);
      var timeCodeSecond = Math.floor(timeCode % 60);
      timeCodes[i].textContent = "".concat(timeCodeMinutes, ":").concat(timeCodeSecond);
      timeCodes[i].addEventListener('click', function (evt) {
        video.currentTime = evt.target.dataset.videoTimecode;
      });
    }
  });
};



/***/ }),

/***/ "./js/modules/lazy-video-load.js":
/*!***************************************!*\
  !*** ./js/modules/lazy-video-load.js ***!
  \***************************************/
/*! exports provided: loadVideo */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "loadVideo", function() { return loadVideo; });
var loadVideo = function loadVideo() {
  var breakpoint = window.matchMedia('(min-width:768px)');
  var videos = document.querySelectorAll('video');

  if (videos.length !== 0) {
    videos.forEach(function (video) {
      var breakpointChecker = function breakpointChecker() {
        if (video.dataset.src) {
          video.src = video.dataset.src;

          if (video.hasAttribute('data-autoplay')) {
            video.play();
          }
        } else {
          if (breakpoint.matches) {
            if (video.dataset.srcDesktop) {
              video.src = video.dataset.srcDesktop;

              if (video.hasAttribute('data-autoplay')) {
                video.play();
              }
            }
          } else {
            if (video.dataset.srcMobile) {
              video.src = video.dataset.srcMobile;
              video.autoplay = true;
            }
          }
        }
      };

      breakpoint.addListener(breakpointChecker);
      breakpointChecker(); // window.enableInlineVideo(video);
    });
  }
};



/***/ }),

/***/ "./js/modules/map/init-custom-pin.js":
/*!*******************************************!*\
  !*** ./js/modules/map/init-custom-pin.js ***!
  \*******************************************/
/*! exports provided: initCustomPin */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "initCustomPin", function() { return initCustomPin; });
var renderDefaultPin = function renderDefaultPin(cords, mapEl) {
  var pinSize = [52, 74];
  var offsetPin = [-26, -37];
  return new window.ymaps.Placemark(cords, null, {
    iconLayout: 'default#image',
    iconImageHref: mapEl.dataset.iconPin,
    iconImageSize: pinSize,
    iconImageOffset: offsetPin,
    cursor: 'grab'
  });
};

var initCustomPin = function initCustomPin(ymap, mapEl, type) {
  var placeCords = mapEl.dataset.mapPlaceCords.split(',');

  switch (type) {
    default:
      ymap.geoObjects.add(renderDefaultPin(placeCords, mapEl));
      break;
  }
};



/***/ }),

/***/ "./js/modules/map/init-map-business.js":
/*!*********************************************!*\
  !*** ./js/modules/map/init-map-business.js ***!
  \*********************************************/
/*! exports provided: initMapBusiness */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "initMapBusiness", function() { return initMapBusiness; });
/* harmony import */ var _init_map__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./init-map */ "./js/modules/map/init-map.js");

var markerIcon = './img/svg/custom-marker.svg';
var markerActiveIcon = './img/svg/custom-marker-active.svg';
var mediaPoint = matchMedia('(max-width: 767px)');
var myMap;
var timer;

var showPopup = function showPopup(popupEl, marker, swiperInstance, id) {
  var index = swiperInstance.slides.findIndex(function (slide) {
    return slide.dataset.id === marker.id;
  });
  swiperInstance.slideTo(index, 0);
  popupEl.closest('.map-business__popup-wrp').scrollTo(0, 0);
  popupEl.classList.add('is-active');
  popupEl.closest('.map-business').classList.add('is-active');

  if (mediaPoint.matches) {
    clearTimeout(timer);
    timer = setTimeout(function () {
      window.scrollLock.disableScrolling();
    }, 1000);
  }

  document.body.classList.add('is-open-popup');
};

var closePopup = function closePopup(popupEl, collection) {
  popupEl.classList.remove('is-active');
  popupEl.closest('.map-business').classList.remove('is-active');

  if (mediaPoint.matches && document.body.classList.contains('scroll-lock') || mediaPoint.matches && document.body.classList.contains('scroll-lock-ios')) {
    window.scrollLock.enableScrolling();
  }

  document.body.classList.remove('is-open-popup');
  clearTimeout(timer);

  if (mediaPoint.matches && collection) {
    collection.each(function (el) {
      return el.options.set('iconImageHref', markerIcon);
    });
  }
};

var openPopup = function openPopup(popupEl) {
  popupEl.closest('.map-business__popup-wrp').scrollTo(0, 0);
  popupEl.classList.add('is-active');
  popupEl.closest('.map-business').classList.add('is-active');

  if (mediaPoint.matches) {
    clearTimeout(timer);
    timer = setTimeout(function () {
      window.scrollLock.disableScrolling();
    }, 1000);
  }

  document.body.classList.add('is-open-popup');
};

var getPopupSlides = function getPopupSlides(markers) {
  return "".concat(markers.reduce(function (acc, marker) {
    return acc + "\n    <div class=\"swiper-slide\" data-id=\"".concat(marker.id, "\">\n      <div class=\"map-business__image\">\n        <picture>\n          <source type=\"image/webp\" media=\"(max-width: 767px)\" srcset=\"").concat(marker.imageMobile, ".webp\">\n          <source type=\"image/webp\" srcset=\"").concat(marker.image, ".webp\">\n          <source media=\"(max-width: 767px)\" srcset=\"").concat(marker.imageMobile, ".jpg\">\n          <img src=\"").concat(marker.image, ".jpg\" width=\"720\" height=\"633\" alt=\"\u0424\u043E\u0442\u043E \u0416\u0438\u043B\u043E\u0433\u043E \u043A\u043E\u043C\u043F\u043B\u0435\u043A\u0441\u0430\">\n        <picture>\n      </div>\n    </div>\n  ");
  }, ''));
};

var renderPopupSlides = function renderPopupSlides(markers, popupEl) {
  var popupSlider = popupEl.querySelector('[data-business-popup-slider]');
  var slidesMarkup = getPopupSlides(markers);
  popupSlider.querySelector('.swiper-wrapper').insertAdjacentHTML('afterbegin', slidesMarkup);
  var popupSwiper = new window.Swiper(popupSlider, {
    speed: 1000,
    loop: true,
    effect: 'fade',
    allowTouchMove: false,
    fadeEffect: {
      crossFade: true
    }
  });
  return popupSwiper;
};

var getTableMarkup = function getTableMarkup(table) {
  return "<div class=\"card-project-table__table\">\n    ".concat(table.reduce(function (acc, row) {
    return acc + "\n        <div class=\"card-project-table__row\">\n          <div class=\"card-project-table__row-title\">".concat(row.title, "</div>\n          <div class=\"card-project-table__row-value\">").concat(row.value, "</div>\n        </div>\n      ");
  }, ''), "\n  </div>");
};

var getFactoidsMarkup = function getFactoidsMarkup(factoids) {
  return "<div class=\"card-project-table__factoids\">\n    ".concat(factoids.reduce(function (acc, factoid) {
    return acc + "\n        <div class=\"factoid\">\n          <div class=\"factoid__title\">".concat(factoid.title, "</div>\n          <div class=\"factoid__value\">").concat(factoid.value, "</div>\n        </div>\n      ");
  }, ''), "\n  </div>");
};

var getSlideMarkup = function getSlideMarkup(_ref) {
  var name = _ref.name,
      address = _ref.address,
      table = _ref.table,
      factoids = _ref.factoids,
      id = _ref.id,
      type = _ref.type,
      nameMobile = _ref.nameMobile;
  return "<div class=\"card-project-table swiper-slide\" data-id=\"".concat(id, "\">\n    <div class=\"card-project-table__inner\">\n      <h3 class=\"card-project-table__name\">").concat(name, "</h3>\n      <p class=\"card-project-table__type\">").concat(type, "</p>\n      <h3 class=\"card-project-table__name-mobile\">").concat(nameMobile, "</h3>\n      ").concat(address ? "<p class=\"card-project-table__address\">".concat(address, "</p>") : '', "\n      ").concat(getTableMarkup(table), "\n      ").concat(factoids ? getFactoidsMarkup(factoids) : '', "\n    </div>\n  </div>");
};

var addEventHandler = function addEventHandler(markerCollection, markers, popupEl, swiperInstance) {
  markerCollection.events.add('click', function (e) {
    var target = e.get('target');
    popupEl.classList.add('is-active');
    var id = markerCollection.toArray().findIndex(function (marker) {
      return marker === target;
    });
    showPopup(popupEl, markers[id], swiperInstance, id);
  });
};

var setActiveMarker = function setActiveMarker(collection, id) {
  var collectionArr = collection.toArray();
  var marker = collectionArr.find(function (obj) {
    return obj.properties.get('marker').id === id;
  });
  marker.options.set('iconImageHref', markerActiveIcon);
};

var setSlideChangeHandler = function setSlideChangeHandler(collection, swiperInstance, popupSwiper) {
  swiperInstance.on('slideChange', function () {
    var id = swiperInstance.slides[swiperInstance.activeIndex].dataset.id;
    var index = popupSwiper.slides.findIndex(function (slide) {
      return slide.dataset.id === String(id);
    });
    collection.each(function (el) {
      return el.options.set('iconImageHref', markerIcon);
    });
    setActiveMarker(collection, String(id)); // popupSwiper.slideTo(index);
  });
};

var init = function init(mapEl) {
  var popupEl = mapEl.querySelector('[data-map-popup]');
  myMap = new window.ymaps.Map('map', {
    center: [55.76, 37.64],
    zoom: 10,
    controls: [],
    behaviors: mediaPoint.matches ? ['multiTouch'] : ['drag', 'multiTouch']
  }, {
    searchControlProvider: 'yandex#search',
    suppressMapOpenBlock: true,
    autoFitToViewport: 'always'
  });

  if (mapEl.hasAttribute('data-markers')) {
    var url = mapEl.getAttribute('data-markers');
    fetch(url).then(function (response) {
      return response.json();
    }).then(function (_ref2) {
      var markers = _ref2.markers;
      var popupSwiper = renderPopupSlides(markers, popupEl);
      var image = popupEl.querySelector('img');
      image.addEventListener('load', function () {
        setTimeout(function () {
          myMap.setZoom(10);
        }, 100);
      });
      var collection = Object(_init_map__WEBPACK_IMPORTED_MODULE_0__["addMarkers"])({
        markers: markers,
        mapInstance: myMap,
        popupEl: popupEl
      });

      if (!mediaPoint.matches) {
        setActiveMarker(collection, '1');
      }

      var slider = mapEl.querySelector('[data-map-slider]');
      Object(_init_map__WEBPACK_IMPORTED_MODULE_0__["renderSlides"])(markers, slider, getSlideMarkup);
      var swiperInstance = Object(_init_map__WEBPACK_IMPORTED_MODULE_0__["initSwiper"])(slider, 1000);
      setSlideChangeHandler(collection, swiperInstance, popupSwiper);
      addEventHandler(collection, markers, popupEl, swiperInstance);
      swiperInstance.controller.control = popupSwiper; // if (popupEl) {
      // const popupWrp = popupEl.closest('.map-business__popup-wrp');
      // const closePopupBtn = popupWrp.querySelector('[data-close-map-popup]');
      // const closeBtn = popupWrp.querySelector('.map-business__close');
      // const openPopupBtn = mapEl.querySelector('[data-open-map-popup]');
      // closePopupBtn.addEventListener('click', (e) => {
      //   if (popupEl.classList.contains('is-active')) {
      //     closePopup(popupEl, collection);
      //   } else {
      //     openPopup(popupEl);
      //   }
      // });
      // if (closeBtn) {
      //   closeBtn.addEventListener('click', (e) => {
      //     closePopup(popupEl, collection);
      //   });
      // }
      // if (openPopupBtn) {
      //   openPopupBtn.addEventListener('click', (e) => {
      //     openPopup(popupEl);
      //   });
      // }
      // }
    });
  }
};

var breakpointChecker = function breakpointChecker() {
  if (myMap) {
    if (mediaPoint.matches) {
      myMap.behaviors.disable('drag');
    } else {
      myMap.behaviors.enable('drag');
      window.scrollLock.enableScrolling();
    }
  }
};

var initMapBusiness = function initMapBusiness() {
  var mapEl = document.querySelector('.map-business');

  if (!mapEl) {
    return;
  }

  window.ymaps.ready(function () {
    init(mapEl);
  });
  breakpointChecker();
  mediaPoint.addListener(breakpointChecker);
};



/***/ }),

/***/ "./js/modules/map/init-map-chita.js":
/*!******************************************!*\
  !*** ./js/modules/map/init-map-chita.js ***!
  \******************************************/
/*! exports provided: initMapChita */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "initMapChita", function() { return initMapChita; });
/* harmony import */ var _init_custom_pin__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./init-custom-pin */ "./js/modules/map/init-custom-pin.js");

var mediaPoint = matchMedia('(max-width: 767px)');
var isMobile = window.matchMedia('(max-width: 767px)').matches;
var touchMediaPoint = matchMedia('(pointer: coarse)');
var myMap;
var mapCenter;
var mapZoom;
var behaviorsMap;

var init = function init(map) {
  myMap = new window.ymaps.Map(map, {
    center: mapCenter,
    zoom: mapZoom,
    controls: [],
    behaviors: behaviorsMap
  }, {
    suppressMapOpenBlock: true
  });
  Object(_init_custom_pin__WEBPACK_IMPORTED_MODULE_0__["initCustomPin"])(myMap, map);
};

var breakpointChecker = function breakpointChecker() {
  var mapEl = document.querySelector('[data-map="chita"]');

  if (!mapEl) {
    return;
  }

  window.ymaps.ready(function () {
    if (mediaPoint.matches) {
      if (myMap) {
        myMap.destroy();
      }

      mapCenter = mapEl.dataset.mapPlaceCords.split(',');
      behaviorsMap = ['multiTouch'];
      mapZoom = 13;
      init(mapEl);
    } else {
      if (myMap) {
        myMap.destroy();
      }

      mapCenter = mapEl.dataset.mapPlaceCords.split(',');
      behaviorsMap = ['drag', 'multiTouch'];
      mapZoom = 13;
      init(mapEl);
    }
  });
};

var initMapChita = function initMapChita() {
  breakpointChecker();
  mediaPoint.addListener(breakpointChecker);
};



/***/ }),

/***/ "./js/modules/map/init-map-moscow.js":
/*!*******************************************!*\
  !*** ./js/modules/map/init-map-moscow.js ***!
  \*******************************************/
/*! exports provided: initMapMoscow */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "initMapMoscow", function() { return initMapMoscow; });
/* harmony import */ var _init_custom_pin__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./init-custom-pin */ "./js/modules/map/init-custom-pin.js");

var mediaPoint = matchMedia('(max-width: 767px)');
var isMobile = window.matchMedia('(max-width: 767px)').matches;
var touchMediaPoint = matchMedia('(pointer: coarse)');
var myMap;
var mapCenter;
var mapZoom;
var behaviorsMap;

var init = function init(map) {
  myMap = new window.ymaps.Map(map, {
    center: mapCenter,
    zoom: mapZoom,
    controls: [],
    behaviors: behaviorsMap
  }, {
    suppressMapOpenBlock: true
  });
  Object(_init_custom_pin__WEBPACK_IMPORTED_MODULE_0__["initCustomPin"])(myMap, map);
};

var breakpointChecker = function breakpointChecker() {
  var mapEl = document.querySelector('[data-map="moscow"]');

  if (!mapEl) {
    return;
  }

  window.ymaps.ready(function () {
    if (mediaPoint.matches) {
      if (myMap) {
        myMap.destroy();
      }

      mapCenter = mapEl.dataset.mapPlaceCords.split(',');
      behaviorsMap = ['multiTouch'];
      mapZoom = 13;
      init(mapEl);
    } else {
      if (myMap) {
        myMap.destroy();
      }

      mapCenter = mapEl.dataset.mapPlaceCords.split(',');
      behaviorsMap = ['drag', 'multiTouch'];
      mapZoom = 13;
      init(mapEl);
    }
  });
};

var initMapMoscow = function initMapMoscow() {
  breakpointChecker();
  mediaPoint.addListener(breakpointChecker);
};



/***/ }),

/***/ "./js/modules/map/init-map.js":
/*!************************************!*\
  !*** ./js/modules/map/init-map.js ***!
  \************************************/
/*! exports provided: initMap, addMarkers, renderSlides, initSwiper */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "initMap", function() { return initMap; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "addMarkers", function() { return addMarkers; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "renderSlides", function() { return renderSlides; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "initSwiper", function() { return initSwiper; });
/* harmony import */ var _init_custom_pin__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./init-custom-pin */ "./js/modules/map/init-custom-pin.js");
/* harmony import */ var _sliders_render_slider_fraction__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../sliders/render-slider-fraction */ "./js/modules/sliders/render-slider-fraction.js");


var mediaPoint = matchMedia('(max-width: 767px)');
var isMobile = window.matchMedia('(max-width: 767px)').matches;
var touchMediaPoint = matchMedia('(pointer: coarse)');
var myMap;
var mapCenter;
var mapZoom;
var behaviorsMap;

var init = function init(map) {
  myMap = new window.ymaps.Map(map, {
    center: mapCenter,
    zoom: mapZoom,
    controls: [],
    behaviors: behaviorsMap
  }, {
    suppressMapOpenBlock: true
  });
  Object(_init_custom_pin__WEBPACK_IMPORTED_MODULE_0__["initCustomPin"])(myMap, map);
};

var breakpointChecker = function breakpointChecker() {
  var mapEl; // удалить после объявления переменной
  // const mapEl = document.querySelector('');

  if (!mapEl) {
    return;
  }

  window.ymaps.ready(function () {
    if (mediaPoint.matches) {
      if (myMap) {
        myMap.destroy();
      }

      mapCenter = mapEl.dataset.mapPlaceCords.split(',');
      behaviorsMap = ['multiTouch'];
      mapZoom = 13;
      init(mapEl);
    } else {
      if (myMap) {
        myMap.destroy();
      }

      mapCenter = mapEl.dataset.mapPlaceCords.split(',');
      behaviorsMap = ['drag', 'multiTouch'];
      mapZoom = 13;
      init(mapEl);
    }
  });
};

var addMarkers = function addMarkers(_ref) {
  var markers = _ref.markers,
      mapInstance = _ref.mapInstance,
      collection = _ref.collection,
      isBalloon = _ref.isBalloon;
  var markerCollection = collection ? collection : new window.ymaps.GeoObjectCollection(null);
  markers.forEach(function (marker) {
    var balloonOptions = marker.factoid ? {
      marker: marker,
      balloonContentBody: "<div class=\"map-balloon\">\n          <h3 class=\"map-balloon__title\">".concat(marker.name, "</h3>\n\n          <div class=\"factoid\">\n            <div class=\"factoid__title\">").concat(marker.factoid.title, "</div>\n            <div class=\"factoid__value\">").concat(marker.factoid.value, "</div>\n          </div>\n        </div>")
    } : {
      marker: marker
    };
    var markerObj = new window.ymaps.Placemark(marker.coords, balloonOptions, {
      iconLayout: 'default#image',
      iconImageHref: './img/svg/custom-marker.svg',
      iconImageSize: [44, 66],
      iconImageOffset: [-24, -24],
      balloonCloseButton: isMobile,
      balloonOffset: isMobile ? [-102, 0] : [-125, 0],
      balloonMaxWidth: 1000,
      balloonMaxHeight: 1000,
      hideIconOnBalloonOpen: false
    });
    markerCollection.add(markerObj);

    if (marker.factoid) {
      var group = markerObj.events.group();

      var breakpointCheckerInner = function breakpointCheckerInner() {
        if (touchMediaPoint.matches) {
          group.removeAll();
        } else {
          group.add('mouseenter', function (e) {
            markerObj.balloon.open();
          });
          group.add('mouseleave', function (e) {
            markerObj.balloon.close();
          });
        }
      };

      breakpointCheckerInner();
      touchMediaPoint.addListener(breakpointCheckerInner);
    }
  });
  mapInstance.geoObjects.add(markerCollection);
  mapInstance.setBounds(mapInstance.geoObjects.getBounds(), {
    checkZoomRange: true,
    zoomMargin: 10
  }).then(function () {
    if (mapInstance.getZoom() > 10) {
      mapInstance.setZoom(10);
    }
  });
  return markerCollection;
};

var renderSlides = function renderSlides(markers, wrapEl, slideMarkup) {
  var slidesMarkup = markers.filter(function (marker) {
    return !marker.factoid;
  }).reduce(function (acc, item) {
    return acc + slideMarkup(item);
  }, '');
  var wrapper = wrapEl.querySelector('.swiper-wrapper');
  wrapper.insertAdjacentHTML('afterbegin', slidesMarkup);
};

var initSwiper = function initSwiper(wrapEl) {
  var speed = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 0;
  return new window.Swiper(wrapEl, {
    speed: speed,
    loop: true,
    navigation: {
      nextEl: '[data-next-btn]',
      prevEl: '[data-prev-btn]'
    },
    pagination: {
      el: '[data-pagination]',
      type: 'custom',
      renderCustom: _sliders_render_slider_fraction__WEBPACK_IMPORTED_MODULE_1__["renderFraction"]
    },
    effect: 'fade',
    fadeEffect: {
      crossFade: true
    },
    breakpoints: {
      1024: {
        allowTouchMove: false
      }
    }
  });
};

var initMap = function initMap() {
  breakpointChecker();
  mediaPoint.addListener(breakpointChecker);
};



/***/ }),

/***/ "./js/modules/modals/init-modals.js":
/*!******************************************!*\
  !*** ./js/modules/modals/init-modals.js ***!
  \******************************************/
/*! exports provided: modals, initModals */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "modals", function() { return modals; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "initModals", function() { return initModals; });
/* harmony import */ var _modals__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./modals */ "./js/modules/modals/modals.js");
/* harmony import */ var _init_intro_video__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../init-intro-video */ "./js/modules/init-intro-video.js");


var modals; // Здесь реализован пример открытия модалки через колбэк закрытия
// const openModalInCloseCallback = (name, context = this) => {
//   context._enableScrolling = false;
//   context._setSettings('default');
//   modals.open(name);
// };
// closeCallback() {
//   openModalInCloseCallback('modal-5');
// },

var settings = {
  'default': {
    preventDefault: true,
    stopPlay: true,
    lockFocus: true,
    startFocus: true,
    focusBack: true,
    eventTimeout: 400,
    openCallback: false,
    closeCallback: false
  },
  'video': {
    preventDefault: true,
    stopPlay: true,
    lockFocus: true,
    startFocus: true,
    focusBack: true,
    eventTimeout: 400,
    openCallback: false,
    closeCallback: _init_intro_video__WEBPACK_IMPORTED_MODULE_1__["modalVideoClose"]
  }
};

var initModals = function initModals() {
  var modalElements = document.querySelectorAll('.modal');

  if (modalElements.length) {
    modalElements.forEach(function (el) {
      setTimeout(function () {
        el.classList.remove('modal--preload');
      }, 100);
    });
  }

  modals = new _modals__WEBPACK_IMPORTED_MODULE_0__["Modals"](settings); // Используйте в разработке экспортируемую переменную modals, window сделан для бэкэнда

  window.modals = modals;
};



/***/ }),

/***/ "./js/modules/modals/modals.js":
/*!*************************************!*\
  !*** ./js/modules/modals/modals.js ***!
  \*************************************/
/*! exports provided: Modals */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "Modals", function() { return Modals; });
/* harmony import */ var _utils_scroll_lock__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../utils/scroll-lock */ "./js/utils/scroll-lock.js");
/* harmony import */ var _utils_focus_lock__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../utils/focus-lock */ "./js/utils/focus-lock.js");
function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); Object.defineProperty(Constructor, "prototype", { writable: false }); return Constructor; }



var Modals = /*#__PURE__*/function () {
  function Modals() {
    var settings = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};

    _classCallCheck(this, Modals);

    this._scrollLock = new _utils_scroll_lock__WEBPACK_IMPORTED_MODULE_0__["ScrollLock"]();
    this._focusLock = new _utils_focus_lock__WEBPACK_IMPORTED_MODULE_1__["FocusLock"]();
    this._modalOpenElements = document.querySelectorAll('[data-open-modal]');
    this._openedModalElement = null;
    this._modalName = null;
    this._enableScrolling = true;
    this._settingKey = 'default';
    this._settings = settings;
    this._preventDefault = this._settings[this._settingKey].preventDefault;
    this._stopPlay = this._settings[this._settingKey].stopPlay;
    this._lockFocus = this._settings[this._settingKey].lockFocus;
    this._startFocus = this._settings[this._settingKey].startFocus;
    this._focusBack = this._settings[this._settingKey].focusBack;
    this._eventTimeout = this._settings[this._settingKey].eventTimeout;
    this._openCallback = this._settings[this._settingKey].openCallback;
    this._closeCallback = this._settings[this._settingKey].closeCallback;
    this._documentKeydownHandler = this._documentKeydownHandler.bind(this);
    this._documentClickHandler = this._documentClickHandler.bind(this);
    this._modalClickHandler = this._modalClickHandler.bind(this);

    this._init();
  }

  _createClass(Modals, [{
    key: "_init",
    value: function _init() {
      if (this._modalOpenElements.length) {
        document.addEventListener('click', this._documentClickHandler);
      }
    }
  }, {
    key: "_setSettings",
    value: function _setSettings() {
      var settingKey = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : this._settingKey;

      if (!this._settings[settingKey]) {
        return;
      }

      this._preventDefault = typeof this._settings[settingKey].preventDefault === 'boolean' ? this._settings[settingKey].preventDefault : this._settings[this._settingKey].preventDefault;
      this._stopPlay = typeof this._settings[settingKey].stopPlay === 'boolean' ? this._settings[settingKey].stopPlay : this._settings[this._settingKey].stopPlay;
      this._lockFocus = typeof this._settings[settingKey].lockFocus === 'boolean' ? this._settings[settingKey].lockFocus : this._settings[this._settingKey].lockFocus;
      this._startFocus = typeof this._settings[settingKey].startFocus === 'boolean' ? this._settings[settingKey].startFocus : this._settings[this._settingKey].startFocus;
      this._focusBack = typeof this._settings[settingKey].lockFocus === 'boolean' ? this._settings[settingKey].focusBack : this._settings[this._settingKey].focusBack;
      this._eventTimeout = typeof this._settings[settingKey].eventTimeout === 'number' ? this._settings[settingKey].eventTimeout : this._settings[this._settingKey].eventTimeout;
      this._openCallback = this._settings[settingKey].openCallback || this._settings[this._settingKey].openCallback;
      this._closeCallback = this._settings[settingKey].closeCallback || this._settings[this._settingKey].closeCallback;
    }
  }, {
    key: "_documentClickHandler",
    value: function _documentClickHandler(evt) {
      var target = evt.target;

      if (!target.closest('[data-open-modal]')) {
        return;
      }

      evt.preventDefault();
      this._modalName = target.closest('[data-open-modal]').dataset.openModal;

      if (!this._modalName) {
        return;
      }

      this.open();
    }
  }, {
    key: "_documentKeydownHandler",
    value: function _documentKeydownHandler(evt) {
      var isEscKey = evt.key === 'Escape' || evt.key === 'Esc';

      if (isEscKey) {
        evt.preventDefault();
        this.close(document.querySelector('.modal.is-active').dataset.modal);
      }
    }
  }, {
    key: "_modalClickHandler",
    value: function _modalClickHandler(evt) {
      var target = evt.target;

      if (!target.closest('[data-close-modal]')) {
        return;
      }

      this.close(target.closest('[data-modal]').dataset.modal);
    }
  }, {
    key: "_addListeners",
    value: function _addListeners(modal) {
      modal.addEventListener('click', this._modalClickHandler);
      document.addEventListener('keydown', this._documentKeydownHandler);
    }
  }, {
    key: "_removeListeners",
    value: function _removeListeners(modal) {
      modal.removeEventListener('click', this._modalClickHandler);
      document.removeEventListener('keydown', this._documentKeydownHandler);
    }
  }, {
    key: "_stopInteractive",
    value: function _stopInteractive(modal) {
      if (this._stopPlay) {
        modal.querySelectorAll('video, audio').forEach(function (el) {
          return el.pause();
        });
        modal.querySelectorAll('[data-iframe]').forEach(function (el) {
          el.querySelector('iframe').contentWindow.postMessage('{"event": "command", "func": "pauseVideo", "args": ""}', '*');
        });
      }
    }
  }, {
    key: "_autoPlay",
    value: function _autoPlay(modal) {
      modal.querySelectorAll('[data-iframe]').forEach(function (el) {
        var autoPlay = el.closest('[data-auto-play]');

        if (autoPlay) {
          el.querySelector('iframe').contentWindow.postMessage('{"event":"command","func":"playVideo","args":""}', '*');
        }
      });
    }
  }, {
    key: "open",
    value: function open() {
      var _this = this;

      var modalName = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : this._modalName;
      var modal = document.querySelector("[data-modal=\"".concat(modalName, "\"]"));

      if (!modal || modal.classList.contains('is-active')) {
        return;
      }

      document.removeEventListener('click', this._documentClickHandler);
      this._openedModalElement = document.querySelector('.modal.is-active');

      if (this._openedModalElement) {
        this._enableScrolling = false;
        this.close(this._openedModalElement.dataset.modal);
      }

      this._setSettings(modalName);

      modal.classList.add('is-active');

      if (!this._openedModalElement) {
        this._scrollLock.disableScrolling();
      }

      if (this._openCallback) {
        this._openCallback();
      }

      if (this._lockFocus) {
        this._focusLock.lock('.modal.is-active', this._startFocus);
      }

      setTimeout(function () {
        _this._addListeners(modal);

        _this._autoPlay(modal);

        document.addEventListener('click', _this._documentClickHandler);
      }, this._eventTimeout);
    }
  }, {
    key: "close",
    value: function close() {
      var _this2 = this;

      var modalName = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : this._modalName;
      var modal = document.querySelector("[data-modal=\"".concat(modalName, "\"]"));
      document.removeEventListener('click', this._documentClickHandler);

      if (!modal || !modal.classList.contains('is-active')) {
        return;
      }

      if (this._lockFocus) {
        this._focusLock.unlock(this._focusBack);
      }

      modal.classList.remove('is-active');

      this._removeListeners(modal);

      this._stopInteractive(modal);

      if (this._closeCallback) {
        this._closeCallback();
      }

      if (this._enableScrolling) {
        setTimeout(function () {
          _this2._scrollLock.enableScrolling();
        }, this._eventTimeout);
      }

      setTimeout(function () {
        document.addEventListener('click', _this2._documentClickHandler);
      }, this._eventTimeout);

      this._setSettings('default');

      this._enableScrolling = true;
    }
  }]);

  return Modals;
}();

/***/ }),

/***/ "./js/modules/set-mob-intro-height.js":
/*!********************************************!*\
  !*** ./js/modules/set-mob-intro-height.js ***!
  \********************************************/
/*! exports provided: setMobIntroHeight */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "setMobIntroHeight", function() { return setMobIntroHeight; });
var intro = document.querySelector('.intro');
var introInner = document.querySelector('.intro__inner');
var breakpointMob = window.matchMedia('(max-width: 767px)');

var breakpointChecker = function breakpointChecker() {
  if (!intro) {
    return;
  }

  if (breakpointMob.matches) {
    var mobHeight = window.innerHeight;
    intro.style.minHeight = mobHeight + 'px';
    introInner.style.minHeight = mobHeight + 'px';
  } else {
    intro.style.minHeight = null;
    introInner.style.minHeight = null;
  }
};

var setMobIntroHeight = function setMobIntroHeight() {
  breakpointChecker();
  breakpointMob.addListener(breakpointChecker);
};



/***/ }),

/***/ "./js/modules/show-label.js":
/*!**********************************!*\
  !*** ./js/modules/show-label.js ***!
  \**********************************/
/*! exports provided: showLabel */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "showLabel", function() { return showLabel; });
var inputs = document.querySelectorAll('input');
var textareas = document.querySelectorAll('textarea');

var showSimpleLabel = function showSimpleLabel() {
  if (!inputs.length) {
    return;
  }

  inputs.forEach(function (input) {
    if (!input.closest('input[type="file"]')) {
      var labelTag = input.closest('label');
      var label;

      if (labelTag) {
        label = labelTag.querySelector('.custom-input__label');
      }

      if (label) {
        input.addEventListener('blur', function () {
          if (input.value.length > 0) {
            label.classList.add('is-active');
          } else {
            label.classList.remove('is-active');
          }
        });
      }
    }
  });
};

var showTextareaLabel = function showTextareaLabel() {
  if (!textareas.length) {
    return;
  }

  textareas.forEach(function (textarea) {
    var labelTag = textarea.closest('label');
    var label;

    if (labelTag) {
      label = labelTag.querySelector('.custom-textarea__label');
    }

    if (label) {
      textarea.addEventListener('blur', function () {
        if (textarea.value.length > 0) {
          label.classList.add('is-active');
        } else {
          label.classList.remove('is-active');
        }
      });
    }
  });
};

var showLabel = function showLabel() {
  showSimpleLabel();
  showTextareaLabel();
};



/***/ }),

/***/ "./js/modules/sliders/init-facts-slider.js":
/*!*************************************************!*\
  !*** ./js/modules/sliders/init-facts-slider.js ***!
  \*************************************************/
/*! exports provided: initFactsSlider */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "initFactsSlider", function() { return initFactsSlider; });
/* harmony import */ var _render_slider_fraction__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./render-slider-fraction */ "./js/modules/sliders/render-slider-fraction.js");

var factSliders = document.querySelectorAll('[data-facts-slider]');
var breakpointMD = window.matchMedia('(min-width:1024px)');
var mySwiper;
var pagination;
var prevButton;
var nextButton;

var breakpointChecker = function breakpointChecker() {
  if (breakpointMD.matches === true) {
    if (mySwiper) {
      mySwiper.destroy(true, true);
    }
  } else if (breakpointMD.matches === false) {
    for (var i = 0; i < factSliders.length; i++) {
      enableSwiper(factSliders[i]);
    }
  }
};

var enableSwiper = function enableSwiper(slider) {
  prevButton = slider.closest('[data-facts-slider-container]').querySelector('[data-btn-prev]');
  nextButton = slider.closest('[data-facts-slider-container]').querySelector('[data-btn-next]');
  pagination = slider.closest('[data-facts-slider-container]').querySelector('[data-pagination]');
  mySwiper = new Swiper(slider, {
    speed: 600,
    allowTouchMove: true,
    watchOverflow: true,
    navigation: {
      nextEl: nextButton,
      prevEl: prevButton
    },
    pagination: {
      el: pagination,
      type: 'custom',
      renderCustom: _render_slider_fraction__WEBPACK_IMPORTED_MODULE_0__["renderFraction"]
    }
  });
};

var initFactsSlider = function initFactsSlider() {
  breakpointMD.addListener(breakpointChecker);
  breakpointChecker();
};

 // (function() {
//   'use strict';
//   const breakpoint = window.matchMedia( '(min-width:31.25em)' );
//   let mySwiper;
//   const breakpointChecker = function () {
//     if (breakpoint.matches === true) {
//       if (mySwiper !== undefined) mySwiper.destroy(true, true);
//       return;
//     } else if (breakpoint.matches === false) {
//       return enableSwiper();
//     }
//   };
//   const enableSwiper = function() {
//     mySwiper = new Swiper ('.swiper-container', {
//       loop: true,
//       slidesPerView: 'auto',
//       centeredSlides: true,
//       a11y: true,
//       keyboardControl: true,
//       grabCursor: true,
//       pagination: '.swiper-pagination',
//       paginationClickable: true,
//     });
//   };
//   breakpoint.addListener(breakpointChecker);
//   breakpointChecker();
// })();

/***/ }),

/***/ "./js/modules/sliders/init-history-slider.js":
/*!***************************************************!*\
  !*** ./js/modules/sliders/init-history-slider.js ***!
  \***************************************************/
/*! exports provided: initHistorySlider */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "initHistorySlider", function() { return initHistorySlider; });
var historySlider = document.querySelector('[data-slider="history"]');
var prevButton;
var nextButton;

var enableSwiper = function enableSwiper(slider) {
  prevButton = slider.closest('[data-slider-container="history"]').querySelector('[data-btn-prev]');
  nextButton = slider.closest('[data-slider-container="history"]').querySelector('[data-btn-next]');
  var mySwiper = new Swiper(slider, {
    speed: 600,
    allowTouchMove: true,
    watchOverflow: true,
    navigation: {
      nextEl: nextButton,
      prevEl: prevButton
    },
    breakpoints: {
      1024: {
        slidesPerView: 3,
        spaceBetween: 13
      },
      768: {
        slidesPerView: 2,
        spaceBetween: 8
      },
      320: {
        slidesPerView: 1,
        spaceBetween: 8
      }
    }
  });
};

var initHistorySlider = function initHistorySlider() {
  if (historySlider) {
    enableSwiper(historySlider);
  }
};



/***/ }),

/***/ "./js/modules/sliders/init-job-slider.js":
/*!***********************************************!*\
  !*** ./js/modules/sliders/init-job-slider.js ***!
  \***********************************************/
/*! exports provided: initJobSlider */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "initJobSlider", function() { return initJobSlider; });
var jobsliders = document.querySelectorAll('[data-job-slider]');
var mySwiper;
var pagination;
var circles;
var animationDelay;
var animationSpeed;
var sliderImgWrappers;
var isFirstLoad = true;

var setSpeedForProgress = function setSpeedForProgress(slider) {
  circles = slider.querySelectorAll('[data-name="progress"]');
  circles.forEach(function (circle) {
    circle.style.animationDuration = "".concat(animationSpeed, "ms");
  });
};

var initSlider = function initSlider(slider) {
  pagination = slider.closest('[data-job-slider-container]').querySelector('[data-pagination]');
  sliderImgWrappers = slider.querySelectorAll('[data-slider-img]');

  var getUrlImg = function getUrlImg(imgWrappers, index) {
    var img = imgWrappers[index].querySelector('img');

    if (!img) {
      return;
    }

    var getPosition = img.getAttribute('src').lastIndexOf('.'); // eslint-disable-next-line consistent-return

    return img.getAttribute('src').slice(0, getPosition);
  };

  var paginationRoot = 'img-pagination';

  var getTemplate = function getTemplate(index, className) {
    return "<button class=\"".concat(className, "\" type=\"button\" data-bullet=\"\">\n        <svg viewBox=\"0 0 80 80\" data-name=\"slider-progress\">\n          <circle data-name=\"progress\" stroke=\"#ffffff\" stroke-width=\"1\" cx=\"40\" cy=\"40\" r=\"39\" fill=\"transparent\"/>\n        </svg>\n        <span class=\"").concat(paginationRoot, "__img\">\n          <picture>\n            <source type=\"image/webp\" srcset=\"").concat(getUrlImg(sliderImgWrappers, index), ".webp, ").concat(getUrlImg(sliderImgWrappers, index), "@2x.webp 2x\"><img src=\"").concat(getUrlImg(sliderImgWrappers, index), ".jpg\" srcset=\"").concat(getUrlImg(sliderImgWrappers, index), "@2x.jpg 2x\" width=\"1440\" height=\"764\" alt=\"\u0424\u043E\u0442\u043E \u0441\u043E\u0442\u0440\u0443\u0434\u043D\u0438\u043A\u0430\">\n          </picture>\n        </span>\n      </button>");
  };

  mySwiper = new Swiper(slider, {
    allowTouchMove: true,
    watchOverflow: true,
    speed: animationDelay,
    watchSlidesProgress: true,
    slidesPerView: 'auto',
    loop: true,
    parallax: true,
    autoplay: {
      delay: animationSpeed,
      disableOnInteraction: false
    },
    pagination: {
      el: pagination,
      bulletClass: "".concat(paginationRoot, "__button"),
      bulletActiveClass: 'is-active',
      clickable: true,
      renderBullet: getTemplate
    },
    on: {
      slideChange: function slideChange() {
        if (isFirstLoad && circles) {
          circles.forEach(function (circle) {
            circle.style.animationDelay = "".concat(animationDelay, "ms");
          });
          isFirstLoad = false;
        }
      }
    }
  });
};

var initJobSlider = function initJobSlider() {
  if (!jobsliders.length) {
    return;
  }

  for (var i = 0; i < jobsliders.length; i++) {
    animationDelay = parseInt(jobsliders[i].dataset.delay, 10);
    animationSpeed = parseInt(jobsliders[i].dataset.speed, 10);
    initSlider(jobsliders[i]);
    setSpeedForProgress(jobsliders[i]);
  }
};



/***/ }),

/***/ "./js/modules/sliders/init-news-slider.js":
/*!************************************************!*\
  !*** ./js/modules/sliders/init-news-slider.js ***!
  \************************************************/
/*! exports provided: initNewsSlider */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "initNewsSlider", function() { return initNewsSlider; });
var sliderBlock = document.querySelector('.slider-gallery');

var initNewsSlider = function initNewsSlider() {
  var swiper;

  if (!sliderBlock) {
    return;
  } else {
    swiper = new Swiper('.slider-gallery', {
      effect: 'creative',
      creativeEffect: {
        prev: {
          shadow: true,
          translate: [0, 0, -400]
        },
        next: {
          translate: ['100%', 0, 0]
        }
      },
      grabCursor: true,
      navigation: {
        nextEl: '.slider-controls__btn--next',
        prevEl: '.slider-controls__btn--prev'
      },
      pagination: {
        el: '.slider-gallery__pagination',
        type: 'fraction',
        clickable: true
      },
      breakpoints: {
        1440: {
          slidesPerView: 1,
          spaceBetween: 30
        }
      }
    });
  }
};



/***/ }),

/***/ "./js/modules/sliders/init-principles-slider.js":
/*!******************************************************!*\
  !*** ./js/modules/sliders/init-principles-slider.js ***!
  \******************************************************/
/*! exports provided: initPrinciplesSlider */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "initPrinciplesSlider", function() { return initPrinciplesSlider; });
var principlesSlider = document.querySelector('[data-principles-slider]');
var breakpointMD = window.matchMedia('(min-width:768px)');
var mySwiper;
var prevButton;
var nextButton;

var breakpointChecker = function breakpointChecker() {
  if (breakpointMD.matches === true) {
    if (mySwiper) {
      mySwiper.destroy(true, true);
    }
  } else if (breakpointMD.matches === false) {
    enableSwiper(principlesSlider);
  }
};

var enableSwiper = function enableSwiper(slider) {
  prevButton = slider.closest('[data-principles-slider-container]').querySelector('[data-btn-prev]');
  nextButton = slider.closest('[data-principles-slider-container]').querySelector('[data-btn-next]');
  mySwiper = new Swiper(slider, {
    speed: 600,
    allowTouchMove: true,
    watchOverflow: true,
    navigation: {
      nextEl: nextButton,
      prevEl: prevButton
    },
    slidesPerView: 1,
    spaceBetween: 8
  });
};

var initPrinciplesSlider = function initPrinciplesSlider() {
  if (principlesSlider) {
    breakpointMD.addListener(breakpointChecker);
    breakpointChecker();
  }
};



/***/ }),

/***/ "./js/modules/sliders/init-team-slider.js":
/*!************************************************!*\
  !*** ./js/modules/sliders/init-team-slider.js ***!
  \************************************************/
/*! exports provided: initTeamSlider */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "initTeamSlider", function() { return initTeamSlider; });
/* harmony import */ var _utils_requestHTTP__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../utils/requestHTTP */ "./js/utils/requestHTTP.js");
/* harmony import */ var _init_move_to__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../init-move-to */ "./js/modules/init-move-to.js");
/* harmony import */ var _utils_scroll_lock__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../../utils/scroll-lock */ "./js/utils/scroll-lock.js");



var teamSliders = document.querySelectorAll('.team-slider'); // const body = document.querySelector('body');

var breakpointMob = window.matchMedia('(max-width: 767px)');
var breakpoint1279 = window.matchMedia('(max-width: 1279px)'); // const breakpoint1919 = window.matchMedia('(max-width: 1919px)');

var pageHeader = document.querySelector('.header');
var templ;
var colCount;
var maxHeight;
var slides;
var wrp;
var teamMobSlider;
var sliderBlock;
var teamBlock;
var activeSlideNum;
var change;
var colNum;
var scrollLock = new _utils_scroll_lock__WEBPACK_IMPORTED_MODULE_2__["ScrollLock"]();

var createTemplate = function createTemplate() {
  templ = document.createDocumentFragment();
  var content = document.createElement('div');
  content.classList.add('team-slider__slide-content');
  content.innerHTML = "\n    <div class=\"team-slider__slide-content-block\">\n      <div class=\"team-slider__slide-content-img-wrp\">\n        <div class=\"team-slider__slide-content-img\"></div>\n      </div>\n      <div class=\"team-slider__slide-content-inner\">\n        <div class=\"team-slider__slide-content-header\">\n          <h3></h3>\n          <span></span>\n        </div>\n        <button class=\"btn btn--white team-slider__slide-content-close-btn team-slider__slide-content-close-btn--bottom\" type=\"button\" aria-label=\"\u0417\u0430\u043A\u0440\u044B\u0442\u044C \u043F\u043E\u043F\u0430\u043F\">\n          \u0417\u0430\u043A\u0440\u044B\u0442\u044C \u043E\u043A\u043D\u043E\n        </button>\n      </div>\n      <div class=\"team-slider__slide-content-close\">\n        <button class=\"team-slider__slide-content-close-btn\" type=\"button\" aria-label=\"\u0417\u0430\u043A\u0440\u044B\u0442\u044C \u043F\u043E\u043F\u0430\u043F\">\n          <svg width=\"20\" height=\"20\" aria-hidden=\"true\">\n            <use xlink:href=\"#icon-close-modal\"></use>\n          </svg>\n        </button>\n      </div>\n    </div>\n  ";
  templ.appendChild(content);
};

var onSuccess = function onSuccess(data) {
  var teamData = data.teamSlider;
  showMore(teamData);
};

var getData = function getData(teamSlider) {
  var requestURL = teamSlider.dataset.teamUrl;
  Object(_utils_requestHTTP__WEBPACK_IMPORTED_MODULE_0__["requestHTTP"])(requestURL, onSuccess);
};

var renderContent = function renderContent(fragment, ind, data, changeFlag) {
  var block = fragment.querySelector('.team-slider__slide-content');
  var imgWrp = fragment.querySelector('.team-slider__slide-content-img');
  var contentInner = fragment.querySelector('.team-slider__slide-content-inner');
  var contentInnerTexts = fragment.querySelectorAll('.team-slider__slide-content-inner .team-slider__slide-content-text');
  var header = block.querySelector('.team-slider__slide-content-header');
  var title = block.querySelector('.team-slider__slide-content-header h3');
  var desc = block.querySelector('.team-slider__slide-content-header > span');

  if (changeFlag) {
    header.style.opacity = 0;
    imgWrp.style.opacity = 0;
    imgWrp.style.transitionDelay = 0 + 's';

    if (contentInnerTexts.length > 0) {
      for (var i = 0; i < contentInnerTexts.length; i++) {
        contentInnerTexts[i].style.opacity = 0;
      }
    }

    setTimeout(function () {
      if (contentInnerTexts.length > 0) {
        for (var _i = 0; _i < contentInnerTexts.length; _i++) {
          contentInner.removeChild(contentInnerTexts[_i]);
        }
      }

      renderData(data, ind, title, desc, imgWrp, contentInner, block, changeFlag);
    }, 700);
    setTimeout(function () {
      header.style.opacity = null;
      imgWrp.style.opacity = null;
      var blockContentInnerTexts = block.querySelectorAll('.team-slider__slide-content-inner .team-slider__slide-content-text');

      if (blockContentInnerTexts.length > 0) {
        for (var _i2 = 0; _i2 < blockContentInnerTexts.length; _i2++) {
          blockContentInnerTexts[_i2].style.opacity = null;
        }
      }
    }, 800);
    setTimeout(function () {
      imgWrp.style.transitionDelay = null;
    }, 1500);
  } else {
    if (contentInnerTexts.length > 0) {
      for (var _i3 = 0; _i3 < contentInnerTexts.length; _i3++) {
        contentInner.removeChild(contentInnerTexts[_i3]);
      }
    }

    renderData(data, ind, title, desc, imgWrp, contentInner, block, changeFlag);
  }
};

var renderData = function renderData(data, ind, title, desc, imgWrp, contentInner, block, changeFlag) {
  var closeBtmBtn = block.querySelector('.team-slider__slide-content-close-btn--bottom');

  if (data[ind].id) {
    block.setAttribute('id', data[ind].id);
  }

  if (data[ind].title) {
    title.innerHTML = "\n      <span>".concat(data[ind].title.titleSurname, "</span>\n      <span>").concat(data[ind].title.titleName, "</span>\n    ");
  }

  if (data[ind].desc) {
    desc.innerHTML = "".concat(data[ind].desc);
  }

  if (data[ind].imgContentName) {
    imgWrp.innerHTML = "\n      <picture>\n        <source type=\"image/webp\" media=\"(max-width: 767px)\" srcset=\"img/slides/team/bio/".concat(data[ind].imgContentNameMob, ".webp, img/slides/team/bio/").concat(data[ind].imgContentNameMob, "@2x.webp 2x\">\n        <source type=\"image/webp\" srcset=\"img/slides/team/bio/").concat(data[ind].imgContentName, ".webp, img/slides/team/bio/").concat(data[ind].imgContentName, "@2x.webp 2x\">\n        <source media=\"(max-width: 767px)\" srcset=\"img/slides/team/bio/").concat(data[ind].imgContentNameMob, ".").concat(data[ind].imgContentFormat, ", img/slides/team/bio/").concat(data[ind].imgContentNameMob, "@2x.").concat(data[ind].imgContentFormat, " 2x\">\n        <img src=\"img/slides/team/bio/").concat(data[ind].imgContentName, ".").concat(data[ind].imgContentFormat, "\" srcset=\"img/slides/team/bio/").concat(data[ind].imgContentName, "@2x.").concat(data[ind].imgContentFormat, " 2x\" width=").concat(data[ind].imgContentWidth, " height=").concat(data[ind].imgContentHeight, " alt=").concat(data[ind].imgContentAlt, ">\n      </picture>\n    ");
  }

  if (data[ind].textBlocks) {
    var textBlockTempl = document.createElement('div');
    textBlockTempl.classList.add('team-slider__slide-content-text');

    for (var i = 0; i < data[ind].textBlocks.length; i++) {
      var textBlock = textBlockTempl.cloneNode(true);

      if (changeFlag) {
        textBlock.style.opacity = 0;
      }

      contentInner.insertBefore(textBlock, closeBtmBtn);
      var textBlocks = block.querySelectorAll('.team-slider__slide-content-text'); //  const header = textBlocks[i].querySelector('h4');
      // header.innerHTML = `${data[ind].textBlocks[i].header}`;

      for (var n = 0; n < data[ind].textBlocks[i].paragraphs.length; n++) {
        var paragraph = document.createElement('p');
        paragraph.innerHTML = "".concat(data[ind].textBlocks[i].paragraphs[n].text);
        textBlocks[i].appendChild(paragraph);
      }
    }
  }
};

var insertBlock = function insertBlock(fragment, k, wrapper, allSlides) {
  var content = fragment.querySelector('.team-slider__slide-content');
  var block = content.cloneNode(true);

  if (breakpointMob.matches) {
    scrollLock.disableScrolling();
    sliderBlock.appendChild(block);
  } else {
    wrapper.insertBefore(block, allSlides[k]);
  }

  sliderBlock.style.setProperty('--contentMaxHeight', maxHeight);
  setTimeout(function () {
    teamBlock.classList.add('is-active');
    teamBlock.style.transform = 'none';
    var vh = window.innerHeight * 0.01;
    document.documentElement.style.setProperty('--vh', "".concat(vh, "px"));
  }, 100);
};

var removeBlock = function removeBlock(wrapper) {
  sliderBlock.style.setProperty('--contentMaxHeight', 0);
  teamBlock.classList.remove('is-active');
  setTimeout(function () {
    if (breakpointMob.matches) {
      sliderBlock.querySelector('.team-slider__slide-content').remove();
      scrollLock.enableScrolling();
    } else {
      if (wrapper.querySelector('.team-slider__slide-content')) {
        wrapper.querySelector('.team-slider__slide-content').remove(); // scrollLock.enableScrolling();
      }
    }

    teamBlock.style.transform = null;
    var vh = window.innerHeight * 0.01;
    document.documentElement.style.setProperty('--vh', "".concat(vh, "px"));
  }, 500);
};

var changeBlock = function changeBlock(fragment, k, wrapper, allSlides) {
  sliderBlock.style.setProperty('--contentMaxHeight', 0);
  teamBlock.classList.remove('is-active');
  teamBlock.style.transform = null;
  setTimeout(function () {
    wrapper.querySelector('.team-slider__slide-content').remove();
  }, 600);
  setTimeout(function () {
    insertBlock(fragment, k, wrapper, allSlides);
  }, 600);
};

var showMore = function showMore(teamData) {
  // const slides = teamSlider.querySelectorAll('.team-slider__slide');
  // const wrp = teamSlider.querySelector('.team-slider__swiper-wrapper');
  var index;
  var activeSlide;
  createTemplate();
  window.addEventListener('click', function (evt) {
    if (evt.target.closest('.team-slider__slide')) {
      // прячет шапку на моб
      if (breakpointMob.matches) {
        pageHeader.classList.add('is-hidden');
      }

      activeSlide = evt.target.closest('.team-slider__slide');
      change = false;

      for (var i = 0; i < slides.length; i++) {
        if (slides[i] === evt.target.closest('.team-slider__slide')) {
          index = i;
        }
      }

      for (var k = colCount; k <= slides.length + k; k = k + colCount) {
        if (index < k) {
          colNum = k;

          if (!teamBlock.classList.contains('is-active') && !activeSlideNum) {
            renderContent(templ, index, teamData, change);
            insertBlock(templ, colNum, wrp, slides);

            if (!breakpointMob.matches) {
              Object(_init_move_to__WEBPACK_IMPORTED_MODULE_1__["initMoveToBlock"])(activeSlide);
            }

            activeSlideNum = index;
            activeSlide.classList.add('is-open');
          } else if (teamBlock.classList.contains('is-active') && activeSlideNum === index) {
            removeBlock(wrp);
            activeSlideNum = null;
            activeSlide.classList.remove('is-open');
          } else if (teamBlock.classList.contains('is-active') && activeSlideNum !== index) {
            if (activeSlideNum >= colNum || activeSlideNum < colNum - colCount) {
              renderContent(templ, index, teamData, change);
              changeBlock(templ, colNum, wrp, slides);

              if (!breakpointMob.matches) {
                Object(_init_move_to__WEBPACK_IMPORTED_MODULE_1__["initMoveToBlock"])(activeSlide, 600);
              }

              activeSlideNum = index;
            } else {
              change = true;
              renderContent(wrp, index, teamData, change, change);

              if (!breakpointMob.matches) {
                Object(_init_move_to__WEBPACK_IMPORTED_MODULE_1__["initMoveToBlock"])(activeSlide, 700);
              }

              activeSlideNum = index;
            }

            for (var m = 0; m < slides.length; m++) {
              if (slides[m].classList.contains('is-open')) {
                slides[m].classList.remove('is-open');
              }
            }

            activeSlide.classList.add('is-open');
          }

          return;
        }
      }
    }

    if (evt.target.closest('.team-slider__slide-content-close-btn')) {
      if (teamBlock.classList.contains('is-active')) {
        removeBlock(wrp);
        activeSlideNum = null;
        activeSlide.classList.remove('is-open');

        if (breakpointMob.matches) {
          pageHeader.classList.remove('is-hidden');
        }
      }
    }
  });
};

var initTeamMobSlider = function initTeamMobSlider() {
  teamSliders.forEach(function (teamSlider) {
    var teamSwiper = teamSlider.querySelector('.team-slider__swiper');
    teamMobSlider = new Swiper(teamSwiper, {
      slidesPerView: 'auto',
      spaceBetween: 0,
      speed: 800
    });
    renderFraction(teamSlider);
  });
};

var renderFraction = function renderFraction(slider) {
  var sliderSlides = slider.querySelectorAll('.swiper-slide');

  for (var i = 0; i < sliderSlides.length; i++) {
    var pagination = sliderSlides[i].querySelector('[data-pagination-team]');
    var current = pagination.querySelector('.nav-count__current');
    var total = pagination.querySelector('.nav-count__total');
    total.innerHTML = "".concat(sliderSlides.length.toString().length === 1 ? "0".concat(sliderSlides.length) : sliderSlides.length);
    current.innerHTML = "".concat((i + 1).toString().length === 1 ? "0".concat(i + 1) : i + 1);
  }
};

var getNewHeight = function getNewHeight() {
  maxHeight = document.documentElement.clientWidth * 740 / 1440 + 'px';
  sliderBlock.style.setProperty('--contentMaxHeight', maxHeight);
};

var breakpointChecker = function breakpointChecker() {
  if (breakpointMob.matches) {
    maxHeight = '100%';
    colCount = 1; // initTeamMobSlider();

    if (teamBlock.classList.contains('is-active')) {
      removeBlock(wrp);
      activeSlideNum = null;
      slides.forEach(function (slide) {
        if (slide.classList.contains('is-open')) {
          slide.classList.remove('is-open');
        }
      });
    }
  } else if (breakpoint1279.matches) {
    maxHeight = document.documentElement.clientWidth * 740 / 1440 + 'px';
    colCount = 2;

    if (teamMobSlider) {
      teamMobSlider.destroy();
    }

    if (teamBlock.classList.contains('is-active')) {
      removeBlock(wrp);
      activeSlideNum = null;
      slides.forEach(function (slide) {
        if (slide.classList.contains('is-open')) {
          slide.classList.remove('is-open');
        }
      });
    }
  } else {
    maxHeight = document.documentElement.clientWidth * 740 / 1440 + 'px';
    colCount = 4;

    if (teamMobSlider) {
      teamMobSlider.destroy();
    }

    if (teamBlock.classList.contains('is-active')) {
      removeBlock(wrp);
      activeSlideNum = null;
      slides.forEach(function (slide) {
        if (slide.classList.contains('is-open')) {
          slide.classList.remove('is-open');
        }
      });
    }
  }

  if (breakpointMob.matches) {
    window.removeEventListener('resize', getNewHeight);
  } else {
    window.addEventListener('resize', getNewHeight);
  }
};

var initTeamSlider = function initTeamSlider() {
  if (!teamSliders.length) {
    return;
  }

  teamSliders.forEach(function (teamSlider) {
    slides = teamSlider.querySelectorAll('.team-slider__slide');
    wrp = teamSlider.querySelector('.team-slider__swiper-wrapper');
    sliderBlock = teamSlider;
    teamBlock = teamSlider.closest('.team');
    getData(teamSlider);
    breakpointChecker();
    breakpointMob.addListener(breakpointChecker);
    breakpoint1279.addListener(breakpointChecker); // breakpoint1919.addListener(breakpointChecker);
  });
};



/***/ }),

/***/ "./js/modules/sliders/init-values-slider.js":
/*!**************************************************!*\
  !*** ./js/modules/sliders/init-values-slider.js ***!
  \**************************************************/
/*! exports provided: initValuesSlider */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "initValuesSlider", function() { return initValuesSlider; });
var valuesSlider = document.querySelector('[data-slider="values"]');
var prevButton;
var nextButton;

var enableSwiper = function enableSwiper(slider) {
  prevButton = slider.closest('[data-slider-container="values"]').querySelector('[data-btn-prev]');
  nextButton = slider.closest('[data-slider-container="values"]').querySelector('[data-btn-next]');
  var mySwiper = new Swiper(slider, {
    speed: 600,
    allowTouchMove: true,
    watchOverflow: true,
    navigation: {
      nextEl: nextButton,
      prevEl: prevButton
    },
    breakpoints: {
      1024: {
        slidesPerView: 3,
        spaceBetween: 13
      },
      768: {
        slidesPerView: 2,
        spaceBetween: 8
      },
      320: {
        slidesPerView: 1,
        spaceBetween: 8
      }
    }
  });
};

var initValuesSlider = function initValuesSlider() {
  if (valuesSlider) {
    enableSwiper(valuesSlider);
  }
};



/***/ }),

/***/ "./js/modules/sliders/render-slider-fraction.js":
/*!******************************************************!*\
  !*** ./js/modules/sliders/render-slider-fraction.js ***!
  \******************************************************/
/*! exports provided: renderFraction */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "renderFraction", function() { return renderFraction; });
// pagination: {
//   el: '[data-pagination]',
//   type: 'custom',
//   renderCustom: renderFraction,
// },
var renderFraction = function renderFraction(swiper, current, total) {
  return "\n  <span class=\"nav-count__current\">".concat(current.toString().length === 1 ? "0".concat(current) : current, "</span>\n  <span class=\"nav-count__del\">&nbsp;/&nbsp;</span>\n  <span class=\"nav-count__total\">").concat(total.toString().length === 1 ? "0".concat(total) : total, "</span>\n  ");
};

/***/ }),

/***/ "./js/modules/tabs/init-tabs.js":
/*!**************************************!*\
  !*** ./js/modules/tabs/init-tabs.js ***!
  \**************************************/
/*! exports provided: initTabs, tabs */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "initTabs", function() { return initTabs; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "tabs", function() { return tabs; });
/* harmony import */ var _tabs__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./tabs */ "./js/modules/tabs/tabs.js");

var tabs;

var initTabs = function initTabs() {
  tabs = new _tabs__WEBPACK_IMPORTED_MODULE_0__["Tabs"](); // Используйте в разработке экспортируемую переменную tabs, window сделан для бэкэнда

  window.tabs = tabs;
};



/***/ }),

/***/ "./js/modules/tabs/tabs.js":
/*!*********************************!*\
  !*** ./js/modules/tabs/tabs.js ***!
  \*********************************/
/*! exports provided: Tabs */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "Tabs", function() { return Tabs; });
function _createForOfIteratorHelper(o, allowArrayLike) { var it = typeof Symbol !== "undefined" && o[Symbol.iterator] || o["@@iterator"]; if (!it) { if (Array.isArray(o) || (it = _unsupportedIterableToArray(o)) || allowArrayLike && o && typeof o.length === "number") { if (it) o = it; var i = 0; var F = function F() {}; return { s: F, n: function n() { if (i >= o.length) return { done: true }; return { done: false, value: o[i++] }; }, e: function e(_e) { throw _e; }, f: F }; } throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); } var normalCompletion = true, didErr = false, err; return { s: function s() { it = it.call(o); }, n: function n() { var step = it.next(); normalCompletion = step.done; return step; }, e: function e(_e2) { didErr = true; err = _e2; }, f: function f() { try { if (!normalCompletion && it.return != null) it.return(); } finally { if (didErr) throw err; } } }; }

function _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === "string") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === "Object" && o.constructor) n = o.constructor.name; if (n === "Map" || n === "Set") return Array.from(o); if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }

function _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); Object.defineProperty(Constructor, "prototype", { writable: false }); return Constructor; }

var Tabs = /*#__PURE__*/function () {
  function Tabs() {
    _classCallCheck(this, Tabs);

    this._windowWidth = window.innerWidth;
    this._documentClickHandler = this._documentClickHandler.bind(this);

    this._init();
  }

  _createClass(Tabs, [{
    key: "_init",
    value: function _init() {
      this._initAllTabs();

      document.addEventListener('click', this._documentClickHandler);
    }
  }, {
    key: "_resizeObserver",
    value: function _resizeObserver() {
      var _this = this;

      return new ResizeObserver(function (entries) {
        var _iterator = _createForOfIteratorHelper(entries),
            _step;

        try {
          for (_iterator.s(); !(_step = _iterator.n()).done;) {
            var entry = _step.value;

            if (entry.target.classList.contains('is-active')) {
              _this._updateTabHeight();
            }
          }
        } catch (err) {
          _iterator.e(err);
        } finally {
          _iterator.f();
        }
      });
    }
  }, {
    key: "_documentClickHandler",
    value: function _documentClickHandler(evt) {
      var target = evt.target;

      if (!target.closest('[data-tabs="control"]')) {
        return;
      }

      evt.preventDefault();
      var control = target.closest('[data-tabs="control"]');
      this.openTab(control);
    }
  }, {
    key: "_initAllTabs",
    value: function _initAllTabs() {
      var _this2 = this;

      var tabs = document.querySelectorAll('[data-tabs="parent"]');
      tabs.forEach(function (tab) {
        _this2._initTab(tab);
      });
    }
  }, {
    key: "_removeAllActiveClasses",
    value: function _removeAllActiveClasses(tabControlElements, tabElements) {
      tabElements.forEach(function (tab) {
        tab.classList.remove('is-active');
      });
      tabControlElements.forEach(function (element, index) {
        element.classList.remove('is-active');
        element.setAttribute('data-index', index);
      });
    }
  }, {
    key: "_setTabStartState",
    value: function _setTabStartState(tab, dataHeight, tabElements, tabContentElement, tabControlElements, dataDelay) {
      var activeIndex = this._returnActiveIndex(tabControlElements);

      var blockHeight = dataHeight === 'max' ? this._returnMaxHeight(tabElements) : tabElements[activeIndex].offsetHeight;

      this._removeAllActiveClasses(tabControlElements, tabElements);

      tab.classList.add('no-transition');
      tabControlElements[activeIndex].classList.add('is-active');
      tabElements[activeIndex].classList.add('is-active');

      if (dataHeight !== 'unset') {
        tabContentElement.style.height = "".concat(blockHeight, "px");
      }

      setTimeout(function () {
        if (dataDelay) {
          tab.classList.remove('no-transition');
        }
      }, dataDelay);
    }
  }, {
    key: "_returnActiveIndex",
    value: function _returnActiveIndex(tabControlElements) {
      var activeIndex = 0;
      var flag = true;
      tabControlElements.forEach(function (control, index) {
        if (control.classList.contains('is-active') && flag) {
          activeIndex = index;
          flag = false;
        }
      });
      return activeIndex;
    }
  }, {
    key: "_returnMaxHeight",
    value: function _returnMaxHeight(tabElements) {
      var height = [];
      tabElements.forEach(function (element) {
        height.push(element.offsetHeight);
      });
      height.sort(function (a, b) {
        return a - b;
      });
      return height[height.length - 1];
    }
  }, {
    key: "_returnScopeList",
    value: function _returnScopeList(nodeList, parent) {
      var array = [];
      nodeList.forEach(function (element) {
        var elementParent = element.closest('[data-tabs="parent"]');

        if (elementParent === parent) {
          array.push(element);
        }
      });
      return array;
    }
  }, {
    key: "_returnScopeChild",
    value: function _returnScopeChild(nodeList, parent) {
      var currentChild;
      nodeList.forEach(function (element) {
        var elementParent = element.closest('[data-tabs="parent"]');

        if (elementParent === parent) {
          currentChild = element;
        }
      });
      return currentChild;
    }
  }, {
    key: "_updateTabHeight",
    value: function _updateTabHeight() {
      var _this3 = this;

      var activeElements = document.querySelectorAll('[data-tabs="element"].is-active');
      activeElements.forEach(function (element) {
        var transition = false;
        var parent = element.closest('[data-tabs="parent"]');

        if (parent.closest('[data-tabs="element"]')) {
          transition = true;
        }

        _this3._setTabElementHeight(element, transition);
      });
    }
  }, {
    key: "_setTabElementHeight",
    value: function _setTabElementHeight(element, transition) {
      var parentElement = element.closest('[data-tabs="parent"]');
      var dataHeight = parentElement.dataset.height;

      var contentElement = this._returnScopeChild(parentElement.querySelectorAll('[data-tabs="content"]'), parentElement);

      var tabElements = this._returnScopeList(parentElement.querySelectorAll('[data-tabs="element"]'), parentElement);

      if (!transition) {
        parentElement.classList.add('no-transition');
      }

      if (dataHeight === 'max') {
        contentElement.style.height = "".concat(this._returnMaxHeight(tabElements), "px");
      } else if (dataHeight === 'unset') {
        contentElement.style.height = null;
      } else {
        contentElement.style.height = "".concat(this._returnScopeChild(parentElement.querySelectorAll('[data-tabs="element"].is-active'), parentElement).offsetHeight, "px");
      }

      setTimeout(function () {
        return parentElement.classList.remove('no-transition');
      });
    }
  }, {
    key: "_initTab",
    value: function _initTab(tab) {
      var _this4 = this;

      var dataHeight = tab.dataset.height;
      var dataDelay = tab.dataset.delay ? tab.dataset.delay : 0;
      var tabContentElement = tab.querySelector('[data-tabs="content"]');

      var tabControlElements = this._returnScopeList(tab.querySelectorAll('[data-tabs="control"]'), tab);

      var tabElements = this._returnScopeList(tab.querySelectorAll('[data-tabs="element"]'), tab);

      this._setTabStartState(tab, dataHeight, tabElements, tabContentElement, tabControlElements, dataDelay);

      if (dataHeight !== 'unset') {
        tabElements.forEach(function (element) {
          _this4._resizeObserver().observe(element);
        });
      }

      setTimeout(function () {
        tab.classList.remove('no-transition-global');
      });
    }
  }, {
    key: "reInit",
    value: function reInit() {
      this._initAllTabs();
    }
  }, {
    key: "openTab",
    value: function openTab(control) {
      var currentIndex = control.dataset.index;
      var parentElement = control.closest('[data-tabs="parent"]');

      if (control.classList.contains('is-active') || parentElement.classList.contains('no-action')) {
        return;
      }

      var dataDelay = parentElement.dataset.delay ? parentElement.dataset.delay : 0;
      var dataHeight = parentElement.dataset.height;
      var contentElement = parentElement.querySelector('[data-tabs="content"]');

      var tabElements = this._returnScopeList(parentElement.querySelectorAll('[data-tabs="element"]'), parentElement);

      var activeControl = this._returnScopeChild(parentElement.querySelectorAll('[data-tabs="control"].is-active'), parentElement);

      var activeElement = this._returnScopeChild(parentElement.querySelectorAll('[data-tabs="element"].is-active'), parentElement);

      var currentHeight = contentElement.offsetHeight;
      var newHeight = tabElements[currentIndex].offsetHeight;
      parentElement.classList.add('no-action');
      document.activeElement.blur();

      if (activeControl) {
        activeControl.classList.remove('is-active');
      }

      if (activeElement) {
        activeElement.classList.remove('is-active');
      }

      if (currentHeight > newHeight) {
        setTimeout(function () {
          if (dataHeight !== 'max' && dataHeight !== 'unset') {
            contentElement.style.height = newHeight + 'px';
          }

          control.classList.add('is-active');
          tabElements[currentIndex].classList.add('is-active');
          parentElement.classList.remove('no-action');
        }, dataDelay);
      } else {
        if (dataHeight !== 'max' && dataHeight !== 'unset') {
          contentElement.style.height = newHeight + 'px';
        }

        setTimeout(function () {
          control.classList.add('is-active');
          tabElements[currentIndex].classList.add('is-active');
          parentElement.classList.remove('no-action');
        }, dataDelay);
      }
    }
  }]);

  return Tabs;
}();

/***/ }),

/***/ "./js/modules/text-split-animation-words.js":
/*!**************************************************!*\
  !*** ./js/modules/text-split-animation-words.js ***!
  \**************************************************/
/*! exports provided: initTextSplitWordsAnimation */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "initTextSplitWordsAnimation", function() { return initTextSplitWordsAnimation; });
var splitText = function splitText(target) {
  var results = window.Splitting({
    target: target,
    by: 'chars',
    whitespace: false
  });
  var spans = target.querySelectorAll('span');
  spans.forEach(function (span) {
    if (span.innerHTML === '<br>') {
      span.innerHTML = '<br>';
    } else if (!span.textContent) {
      span.innerHTML = '&nbsp;';
    }
  });
};

var initTextSplitWordsAnimation = function initTextSplitWordsAnimation() {
  var textElements = document.querySelectorAll('[data-words-animation]');

  if (!textElements.length) {
    return;
  }

  textElements.forEach(splitText);
};



/***/ }),

/***/ "./js/modules/toggle-resources-table.js":
/*!**********************************************!*\
  !*** ./js/modules/toggle-resources-table.js ***!
  \**********************************************/
/*! exports provided: initToggleItems */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "initToggleItems", function() { return initToggleItems; });
var toggleItems = document.querySelectorAll('[data-toggle-item]');

var initToggleItems = function initToggleItems() {
  toggleItems.forEach(function (item) {
    var toggleBtn = item.querySelector('[data-toggle]');
    toggleBtn.addEventListener('click', function () {
      item.classList.toggle('is-active');
    });
  });
};



/***/ }),

/***/ "./js/utils/focus-lock.js":
/*!********************************!*\
  !*** ./js/utils/focus-lock.js ***!
  \********************************/
/*! exports provided: FocusLock */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "FocusLock", function() { return FocusLock; });
function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); Object.defineProperty(Constructor, "prototype", { writable: false }); return Constructor; }

var SELECTORS = ['a[href]', 'area[href]', 'input:not([disabled]):not([type="hidden"]):not([aria-hidden])', 'select:not([disabled]):not([aria-hidden])', 'textarea:not([disabled]):not([aria-hidden])', 'button:not([disabled]):not([aria-hidden])', 'iframe', 'object', 'embed', '[contenteditable]', '[tabindex]:not([tabindex^="-"])'];
var FocusLock = /*#__PURE__*/function () {
  function FocusLock() {
    _classCallCheck(this, FocusLock);

    this._lockedSelector = null;
    this._focusableElements = null;
    this._endElement = null;
    this._selectors = SELECTORS;
    this._documentKeydownHandler = this._documentKeydownHandler.bind(this);
  }

  _createClass(FocusLock, [{
    key: "_documentKeydownHandler",
    value: function _documentKeydownHandler(evt) {
      var activeElement = document.activeElement;

      if (evt.key === 'Tab') {
        if (!this._focusableElements.length) {
          evt.preventDefault();
          activeElement.blur();
          return;
        }

        if (this._focusableElements.length === 1) {
          evt.preventDefault();

          this._focusableElements[0].focus();

          return;
        }

        if (this._focusableElements.length > 1 && !activeElement.closest(this._lockedSelector)) {
          evt.preventDefault();

          this._focusableElements[0].focus();

          return;
        }
      }

      if (evt.key === 'Tab' && !evt.shiftKey && activeElement === this._focusableElements[this._focusableElements.length - 1]) {
        evt.preventDefault();

        this._focusableElements[0].focus();
      }

      if (evt.key === 'Tab' && evt.shiftKey && activeElement === this._focusableElements[0]) {
        evt.preventDefault();

        this._focusableElements[this._focusableElements.length - 1].focus();
      }
    }
  }, {
    key: "lock",
    value: function lock(lockedSelector) {
      var startFocus = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : true;
      this.unlock();
      this._lockedSelector = lockedSelector;
      var lockedElement = document.querySelector(this._lockedSelector);

      if (!lockedElement) {
        return;
      }

      this._focusableElements = lockedElement.querySelectorAll(this._selectors);
      this._endElement = document.activeElement;

      var startElement = lockedElement.querySelector('[data-focus]') || this._focusableElements[0];

      if (this._endElement) {
        this._endElement.blur();
      }

      if (startElement && startFocus) {
        startElement.focus();
      }

      document.addEventListener('keydown', this._documentKeydownHandler);
    }
  }, {
    key: "unlock",
    value: function unlock() {
      var returnFocus = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : true;

      if (this._endElement && returnFocus) {
        this._endElement.focus();
      }

      this._lockedSelector = null;
      this._focusableElements = null;
      this._endElement = null;
      document.removeEventListener('keydown', this._documentKeydownHandler);
    }
  }]);

  return FocusLock;
}();
window.focusLock = new FocusLock();

/***/ }),

/***/ "./js/utils/ios-checker.js":
/*!*********************************!*\
  !*** ./js/utils/ios-checker.js ***!
  \*********************************/
/*! exports provided: iosChecker */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "iosChecker", function() { return iosChecker; });
var iosChecker = function iosChecker() {
  return ['iPad Simulator', 'iPhone Simulator', 'iPod Simulator', 'iPad', 'iPhone', 'iPod'].includes(navigator.platform) // iPad on iOS 13 detection
  || navigator.userAgent.includes('Mac') && 'ontouchend' in document;
};

/***/ }),

/***/ "./js/utils/ios-vh-fix.js":
/*!********************************!*\
  !*** ./js/utils/ios-vh-fix.js ***!
  \********************************/
/*! exports provided: iosVhFix */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "iosVhFix", function() { return iosVhFix; });
/* harmony import */ var _ios_checker__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./ios-checker */ "./js/utils/ios-checker.js");


var iosVhFix = function iosVhFix() {
  if (!(!!window.MSInputMethodContext && !!document.documentMode)) {
    if (Object(_ios_checker__WEBPACK_IMPORTED_MODULE_0__["iosChecker"])()) {
      var vh = window.innerHeight * 0.01;
      document.documentElement.style.setProperty('--vh', "".concat(vh, "px"));
      window.addEventListener('resize', function () {
        vh = window.innerHeight * 0.01;
        document.documentElement.style.setProperty('--vh', "".concat(vh, "px"));
      });
    }
  }
};



/***/ }),

/***/ "./js/utils/requestHTTP.js":
/*!*********************************!*\
  !*** ./js/utils/requestHTTP.js ***!
  \*********************************/
/*! exports provided: requestHTTP */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "requestHTTP", function() { return requestHTTP; });
var requestHTTP = function requestHTTP(url, onSuccess, onError) {
  return fetch(url).then(function (res) {
    if (!res.ok) {
      throw new Error(res.status);
    }

    return res.json();
  }).then(function (data) {
    if (onSuccess) {
      onSuccess(data);
    }

    return data;
  }).catch(function (err) {
    if (onError) {
      onError(err);
    } else {
      console.error(err); // eslint-disable-line no-console
    }
  });
};

/***/ }),

/***/ "./js/utils/scroll-lock.js":
/*!*********************************!*\
  !*** ./js/utils/scroll-lock.js ***!
  \*********************************/
/*! exports provided: ScrollLock */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "ScrollLock", function() { return ScrollLock; });
/* harmony import */ var _ios_checker__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./ios-checker */ "./js/utils/ios-checker.js");
function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); Object.defineProperty(Constructor, "prototype", { writable: false }); return Constructor; }


var ScrollLock = /*#__PURE__*/function () {
  function ScrollLock() {
    _classCallCheck(this, ScrollLock);

    this._iosChecker = _ios_checker__WEBPACK_IMPORTED_MODULE_0__["iosChecker"];
    this._lockClass = this._iosChecker() ? 'scroll-lock-ios' : 'scroll-lock';
    this._scrollTop = null;
    this._fixedBlockElements = document.querySelectorAll('[data-fix-block]');
  }

  _createClass(ScrollLock, [{
    key: "_getScrollbarWidth",
    value: function _getScrollbarWidth() {
      return window.innerWidth - document.documentElement.clientWidth;
    }
  }, {
    key: "_getBodyScrollTop",
    value: function _getBodyScrollTop() {
      return self.pageYOffset || document.documentElement && document.documentElement.ScrollTop || document.body && document.body.scrollTop;
    }
  }, {
    key: "disableScrolling",
    value: function disableScrolling() {
      var _this = this;

      this._scrollTop = document.body.dataset.scroll = document.body.dataset.scroll ? document.body.dataset.scroll : this._getBodyScrollTop();

      if (this._getScrollbarWidth()) {
        document.body.style.paddingRight = "".concat(this._getScrollbarWidth(), "px");

        this._fixedBlockElements.forEach(function (block) {
          block.style.paddingRight = "".concat(_this._getScrollbarWidth(), "px");
        });
      }

      document.body.style.top = "-".concat(this._scrollTop, "px");
      document.body.classList.add(this._lockClass);
    }
  }, {
    key: "enableScrolling",
    value: function enableScrolling() {
      document.body.classList.remove(this._lockClass);
      window.scrollTo(0, +document.body.dataset.scroll);
      document.body.style.paddingRight = null;
      document.body.style.top = null;

      this._fixedBlockElements.forEach(function (block) {
        block.style.paddingRight = null;
      });

      document.body.removeAttribute('data-scroll');
      this._scrollTop = null;
    }
  }]);

  return ScrollLock;
}();
window.scrollLock = new ScrollLock();

/***/ }),

/***/ "./js/utils/scroll-to.js":
/*!*******************************!*\
  !*** ./js/utils/scroll-to.js ***!
  \*******************************/
/*! exports provided: scrollToWithDuration */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "scrollToWithDuration", function() { return scrollToWithDuration; });
var scrollToWithDuration = function scrollToWithDuration(y) {
  var duration = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 0;
  var element = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : document.scrollingElement;

  if (element.scrollTop === y) {
    return;
  }

  var cosParameter = (element.scrollTop - y) / 2;
  var scrollCount = 0;
  var oldTimestamp = null;

  var step = function step(newTimestamp) {
    if (oldTimestamp !== null) {
      scrollCount += Math.PI * (newTimestamp - oldTimestamp) / duration;
      if (scrollCount >= Math.PI) return element.scrollTop = y;
      element.scrollTop = cosParameter + y + cosParameter * Math.cos(scrollCount);
    }

    oldTimestamp = newTimestamp;
    window.requestAnimationFrame(step);
  };

  window.requestAnimationFrame(step);
};



/***/ }),

/***/ "./js/vendor/moveTo.js":
/*!*****************************!*\
  !*** ./js/vendor/moveTo.js ***!
  \*****************************/
/*! exports provided: MoveTo */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "MoveTo", function() { return MoveTo; });
var MoveTo = function () {
  /**
   * Defaults
   * @type {object}
   */
  var defaults = {
    tolerance: 0,
    duration: 300,
    easing: 'easeOutQuart',
    container: window,
    callback: function callback() {}
  };
  /**
   * easeOutQuart Easing Function
   * @param  {number} t - current time
   * @param  {number} b - start value
   * @param  {number} c - change in value
   * @param  {number} d - duration
   * @return {number} - calculated value
   */

  function easeOutQuart(t, b, c, d) {
    t /= d;
    t--;
    return -c * (t * t * t * t - 1) + b;
  }
  /**
   * Merge two object
   *
   * @param  {object} obj1
   * @param  {object} obj2
   * @return {object} merged object
   */


  function mergeObject(obj1, obj2) {
    var obj3 = {};
    Object.keys(obj1).forEach(function (propertyName) {
      obj3[propertyName] = obj1[propertyName];
    });
    Object.keys(obj2).forEach(function (propertyName) {
      obj3[propertyName] = obj2[propertyName];
    });
    return obj3;
  }

  ;
  /**
   * Converts camel case to kebab case
   * @param  {string} val the value to be converted
   * @return {string} the converted value
   */

  function kebabCase(val) {
    return val.replace(/([A-Z])/g, function ($1) {
      return '-' + $1.toLowerCase();
    });
  }

  ;
  /**
   * Count a number of item scrolled top
   * @param  {Window|HTMLElement} container
   * @return {number}
   */

  function countScrollTop(container) {
    if (container instanceof HTMLElement) {
      return container.scrollTop;
    }

    return container.pageYOffset;
  }

  ;
  /**
   * MoveTo Constructor
   * @param {object} options Options
   * @param {object} easeFunctions Custom ease functions
   */

  function MoveTo() {
    var options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
    var easeFunctions = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};
    this.options = mergeObject(defaults, options);
    this.easeFunctions = mergeObject({
      easeOutQuart: easeOutQuart
    }, easeFunctions);
  }
  /**
   * Register a dom element as trigger
   * @param  {HTMLElement} dom Dom trigger element
   * @param  {function} callback Callback function
   * @return {function|void} unregister function
   */


  MoveTo.prototype.registerTrigger = function (dom, callback) {
    var _this = this;

    if (!dom) {
      return;
    }

    var href = dom.getAttribute('href') || dom.getAttribute('data-target'); // The element to be scrolled

    var target = href && href !== '#' ? document.getElementById(href.substring(1)) : document.body;
    var options = mergeObject(this.options, _getOptionsFromTriggerDom(dom, this.options));

    if (typeof callback === 'function') {
      options.callback = callback;
    }

    var listener = function listener(e) {
      e.preventDefault();

      _this.move(target, options);
    };

    dom.addEventListener('click', listener, false);
    return function () {
      return dom.removeEventListener('click', listener, false);
    };
  };
  /**
   * Move
   * Scrolls to given element by using easeOutQuart function
   * @param  {HTMLElement|number} target Target element to be scrolled or target position
   * @param  {object} options Custom options
   */


  MoveTo.prototype.move = function (target) {
    var _this2 = this;

    var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};

    if (target !== 0 && !target) {
      return;
    }

    options = mergeObject(this.options, options);
    var distance = typeof target === 'number' ? target : target.getBoundingClientRect().top;
    var from = countScrollTop(options.container);
    var startTime = null;
    var lastYOffset;
    distance -= options.tolerance; // rAF loop

    var loop = function loop(currentTime) {
      var currentYOffset = countScrollTop(_this2.options.container);

      if (!startTime) {
        // To starts time from 1, we subtracted 1 from current time
        // If time starts from 1 The first loop will not do anything,
        // because easing value will be zero
        startTime = currentTime - 1;
      }

      var timeElapsed = currentTime - startTime;

      if (lastYOffset) {
        if (distance > 0 && lastYOffset > currentYOffset || distance < 0 && lastYOffset < currentYOffset) {
          return options.callback(target);
        }
      }

      lastYOffset = currentYOffset;

      var val = _this2.easeFunctions[options.easing](timeElapsed, from, distance, options.duration);

      options.container.scroll(0, val);

      if (timeElapsed < options.duration) {
        window.requestAnimationFrame(loop);
      } else {
        options.container.scroll(0, distance + from);
        options.callback(target);
      }
    };

    window.requestAnimationFrame(loop);
  };
  /**
   * Adds custom ease function
   * @param {string}   name Ease function name
   * @param {function} fn   Ease function
   */


  MoveTo.prototype.addEaseFunction = function (name, fn) {
    this.easeFunctions[name] = fn;
  };
  /**
   * Returns options which created from trigger dom element
   * @param  {HTMLElement} dom Trigger dom element
   * @param  {object} options The instance's options
   * @return {object} The options which created from trigger dom element
   */


  function _getOptionsFromTriggerDom(dom, options) {
    var domOptions = {};
    Object.keys(options).forEach(function (key) {
      var value = dom.getAttribute("data-mt-".concat(kebabCase(key)));

      if (value) {
        domOptions[key] = isNaN(value) ? value : parseInt(value, 10);
      }
    });
    return domOptions;
  }

  return MoveTo;
}();

/***/ }),

/***/ "./js/vendor/resize-observer.js":
/*!**************************************!*\
  !*** ./js/vendor/resize-observer.js ***!
  \**************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

var __WEBPACK_AMD_DEFINE_FACTORY__, __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;function _typeof(obj) { "@babel/helpers - typeof"; return _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (obj) { return typeof obj; } : function (obj) { return obj && "function" == typeof Symbol && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }, _typeof(obj); }

(function (global, factory) {
  ( false ? undefined : _typeof(exports)) === 'object' && typeof module !== 'undefined' ? factory(exports) :  true ? !(__WEBPACK_AMD_DEFINE_ARRAY__ = [exports], __WEBPACK_AMD_DEFINE_FACTORY__ = (factory),
				__WEBPACK_AMD_DEFINE_RESULT__ = (typeof __WEBPACK_AMD_DEFINE_FACTORY__ === 'function' ?
				(__WEBPACK_AMD_DEFINE_FACTORY__.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__)) : __WEBPACK_AMD_DEFINE_FACTORY__),
				__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__)) : (undefined);
})(this, function (exports) {
  'use strict';

  var resizeObservers = [];

  var hasActiveObservations = function hasActiveObservations() {
    return resizeObservers.some(function (ro) {
      return ro.activeTargets.length > 0;
    });
  };

  var hasSkippedObservations = function hasSkippedObservations() {
    return resizeObservers.some(function (ro) {
      return ro.skippedTargets.length > 0;
    });
  };

  var msg = 'ResizeObserver loop completed with undelivered notifications.';

  var deliverResizeLoopError = function deliverResizeLoopError() {
    var event;

    if (typeof ErrorEvent === 'function') {
      event = new ErrorEvent('error', {
        message: msg
      });
    } else {
      event = document.createEvent('Event');
      event.initEvent('error', false, false);
      event.message = msg;
    }

    window.dispatchEvent(event);
  };

  var ResizeObserverBoxOptions;

  (function (ResizeObserverBoxOptions) {
    ResizeObserverBoxOptions["BORDER_BOX"] = "border-box";
    ResizeObserverBoxOptions["CONTENT_BOX"] = "content-box";
    ResizeObserverBoxOptions["DEVICE_PIXEL_CONTENT_BOX"] = "device-pixel-content-box";
  })(ResizeObserverBoxOptions || (ResizeObserverBoxOptions = {}));

  var freeze = function freeze(obj) {
    return Object.freeze(obj);
  };

  var ResizeObserverSize = function () {
    function ResizeObserverSize(inlineSize, blockSize) {
      this.inlineSize = inlineSize;
      this.blockSize = blockSize;
      freeze(this);
    }

    return ResizeObserverSize;
  }();

  var DOMRectReadOnly = function () {
    function DOMRectReadOnly(x, y, width, height) {
      this.x = x;
      this.y = y;
      this.width = width;
      this.height = height;
      this.top = this.y;
      this.left = this.x;
      this.bottom = this.top + this.height;
      this.right = this.left + this.width;
      return freeze(this);
    }

    DOMRectReadOnly.prototype.toJSON = function () {
      var _a = this,
          x = _a.x,
          y = _a.y,
          top = _a.top,
          right = _a.right,
          bottom = _a.bottom,
          left = _a.left,
          width = _a.width,
          height = _a.height;

      return {
        x: x,
        y: y,
        top: top,
        right: right,
        bottom: bottom,
        left: left,
        width: width,
        height: height
      };
    };

    DOMRectReadOnly.fromRect = function (rectangle) {
      return new DOMRectReadOnly(rectangle.x, rectangle.y, rectangle.width, rectangle.height);
    };

    return DOMRectReadOnly;
  }();

  var isSVG = function isSVG(target) {
    return target instanceof SVGElement && 'getBBox' in target;
  };

  var isHidden = function isHidden(target) {
    if (isSVG(target)) {
      var _a = target.getBBox(),
          width = _a.width,
          height = _a.height;

      return !width && !height;
    }

    var _b = target,
        offsetWidth = _b.offsetWidth,
        offsetHeight = _b.offsetHeight;
    return !(offsetWidth || offsetHeight || target.getClientRects().length);
  };

  var isElement = function isElement(obj) {
    var _a, _b;

    if (obj instanceof Element) {
      return true;
    }

    var scope = (_b = (_a = obj) === null || _a === void 0 ? void 0 : _a.ownerDocument) === null || _b === void 0 ? void 0 : _b.defaultView;
    return !!(scope && obj instanceof scope.Element);
  };

  var isReplacedElement = function isReplacedElement(target) {
    switch (target.tagName) {
      case 'INPUT':
        if (target.type !== 'image') {
          break;
        }

      case 'VIDEO':
      case 'AUDIO':
      case 'EMBED':
      case 'OBJECT':
      case 'CANVAS':
      case 'IFRAME':
      case 'IMG':
        return true;
    }

    return false;
  };

  var global = typeof window !== 'undefined' ? window : {};
  var cache = new WeakMap();
  var scrollRegexp = /auto|scroll/;
  var verticalRegexp = /^tb|vertical/;
  var IE = /msie|trident/i.test(global.navigator && global.navigator.userAgent);

  var parseDimension = function parseDimension(pixel) {
    return parseFloat(pixel || '0');
  };

  var size = function size(inlineSize, blockSize, switchSizes) {
    if (inlineSize === void 0) {
      inlineSize = 0;
    }

    if (blockSize === void 0) {
      blockSize = 0;
    }

    if (switchSizes === void 0) {
      switchSizes = false;
    }

    return new ResizeObserverSize((switchSizes ? blockSize : inlineSize) || 0, (switchSizes ? inlineSize : blockSize) || 0);
  };

  var zeroBoxes = freeze({
    devicePixelContentBoxSize: size(),
    borderBoxSize: size(),
    contentBoxSize: size(),
    contentRect: new DOMRectReadOnly(0, 0, 0, 0)
  });

  var calculateBoxSizes = function calculateBoxSizes(target, forceRecalculation) {
    if (forceRecalculation === void 0) {
      forceRecalculation = false;
    }

    if (cache.has(target) && !forceRecalculation) {
      return cache.get(target);
    }

    if (isHidden(target)) {
      cache.set(target, zeroBoxes);
      return zeroBoxes;
    }

    var cs = getComputedStyle(target);
    var svg = isSVG(target) && target.ownerSVGElement && target.getBBox();
    var removePadding = !IE && cs.boxSizing === 'border-box';
    var switchSizes = verticalRegexp.test(cs.writingMode || '');
    var canScrollVertically = !svg && scrollRegexp.test(cs.overflowY || '');
    var canScrollHorizontally = !svg && scrollRegexp.test(cs.overflowX || '');
    var paddingTop = svg ? 0 : parseDimension(cs.paddingTop);
    var paddingRight = svg ? 0 : parseDimension(cs.paddingRight);
    var paddingBottom = svg ? 0 : parseDimension(cs.paddingBottom);
    var paddingLeft = svg ? 0 : parseDimension(cs.paddingLeft);
    var borderTop = svg ? 0 : parseDimension(cs.borderTopWidth);
    var borderRight = svg ? 0 : parseDimension(cs.borderRightWidth);
    var borderBottom = svg ? 0 : parseDimension(cs.borderBottomWidth);
    var borderLeft = svg ? 0 : parseDimension(cs.borderLeftWidth);
    var horizontalPadding = paddingLeft + paddingRight;
    var verticalPadding = paddingTop + paddingBottom;
    var horizontalBorderArea = borderLeft + borderRight;
    var verticalBorderArea = borderTop + borderBottom;
    var horizontalScrollbarThickness = !canScrollHorizontally ? 0 : target.offsetHeight - verticalBorderArea - target.clientHeight;
    var verticalScrollbarThickness = !canScrollVertically ? 0 : target.offsetWidth - horizontalBorderArea - target.clientWidth;
    var widthReduction = removePadding ? horizontalPadding + horizontalBorderArea : 0;
    var heightReduction = removePadding ? verticalPadding + verticalBorderArea : 0;
    var contentWidth = svg ? svg.width : parseDimension(cs.width) - widthReduction - verticalScrollbarThickness;
    var contentHeight = svg ? svg.height : parseDimension(cs.height) - heightReduction - horizontalScrollbarThickness;
    var borderBoxWidth = contentWidth + horizontalPadding + verticalScrollbarThickness + horizontalBorderArea;
    var borderBoxHeight = contentHeight + verticalPadding + horizontalScrollbarThickness + verticalBorderArea;
    var boxes = freeze({
      devicePixelContentBoxSize: size(Math.round(contentWidth * devicePixelRatio), Math.round(contentHeight * devicePixelRatio), switchSizes),
      borderBoxSize: size(borderBoxWidth, borderBoxHeight, switchSizes),
      contentBoxSize: size(contentWidth, contentHeight, switchSizes),
      contentRect: new DOMRectReadOnly(paddingLeft, paddingTop, contentWidth, contentHeight)
    });
    cache.set(target, boxes);
    return boxes;
  };

  var calculateBoxSize = function calculateBoxSize(target, observedBox, forceRecalculation) {
    var _a = calculateBoxSizes(target, forceRecalculation),
        borderBoxSize = _a.borderBoxSize,
        contentBoxSize = _a.contentBoxSize,
        devicePixelContentBoxSize = _a.devicePixelContentBoxSize;

    switch (observedBox) {
      case ResizeObserverBoxOptions.DEVICE_PIXEL_CONTENT_BOX:
        return devicePixelContentBoxSize;

      case ResizeObserverBoxOptions.BORDER_BOX:
        return borderBoxSize;

      default:
        return contentBoxSize;
    }
  };

  var ResizeObserverEntry = function () {
    function ResizeObserverEntry(target) {
      var boxes = calculateBoxSizes(target);
      this.target = target;
      this.contentRect = boxes.contentRect;
      this.borderBoxSize = freeze([boxes.borderBoxSize]);
      this.contentBoxSize = freeze([boxes.contentBoxSize]);
      this.devicePixelContentBoxSize = freeze([boxes.devicePixelContentBoxSize]);
    }

    return ResizeObserverEntry;
  }();

  var calculateDepthForNode = function calculateDepthForNode(node) {
    if (isHidden(node)) {
      return Infinity;
    }

    var depth = 0;
    var parent = node.parentNode;

    while (parent) {
      depth += 1;
      parent = parent.parentNode;
    }

    return depth;
  };

  var broadcastActiveObservations = function broadcastActiveObservations() {
    var shallowestDepth = Infinity;
    var callbacks = [];
    resizeObservers.forEach(function processObserver(ro) {
      if (ro.activeTargets.length === 0) {
        return;
      }

      var entries = [];
      ro.activeTargets.forEach(function processTarget(ot) {
        var entry = new ResizeObserverEntry(ot.target);
        var targetDepth = calculateDepthForNode(ot.target);
        entries.push(entry);
        ot.lastReportedSize = calculateBoxSize(ot.target, ot.observedBox);

        if (targetDepth < shallowestDepth) {
          shallowestDepth = targetDepth;
        }
      });
      callbacks.push(function resizeObserverCallback() {
        ro.callback.call(ro.observer, entries, ro.observer);
      });
      ro.activeTargets.splice(0, ro.activeTargets.length);
    });

    for (var _i = 0, callbacks_1 = callbacks; _i < callbacks_1.length; _i++) {
      var callback = callbacks_1[_i];
      callback();
    }

    return shallowestDepth;
  };

  var gatherActiveObservationsAtDepth = function gatherActiveObservationsAtDepth(depth) {
    resizeObservers.forEach(function processObserver(ro) {
      ro.activeTargets.splice(0, ro.activeTargets.length);
      ro.skippedTargets.splice(0, ro.skippedTargets.length);
      ro.observationTargets.forEach(function processTarget(ot) {
        if (ot.isActive()) {
          if (calculateDepthForNode(ot.target) > depth) {
            ro.activeTargets.push(ot);
          } else {
            ro.skippedTargets.push(ot);
          }
        }
      });
    });
  };

  var process = function process() {
    var depth = 0;
    gatherActiveObservationsAtDepth(depth);

    while (hasActiveObservations()) {
      depth = broadcastActiveObservations();
      gatherActiveObservationsAtDepth(depth);
    }

    if (hasSkippedObservations()) {
      deliverResizeLoopError();
    }

    return depth > 0;
  };

  var trigger;
  var callbacks = [];

  var notify = function notify() {
    return callbacks.splice(0).forEach(function (cb) {
      return cb();
    });
  };

  var queueMicroTask = function queueMicroTask(callback) {
    if (!trigger) {
      var toggle_1 = 0;
      var el_1 = document.createTextNode('');
      var config = {
        characterData: true
      };
      new MutationObserver(function () {
        return notify();
      }).observe(el_1, config);

      trigger = function trigger() {
        el_1.textContent = "" + (toggle_1 ? toggle_1-- : toggle_1++);
      };
    }

    callbacks.push(callback);
    trigger();
  };

  var queueResizeObserver = function queueResizeObserver(cb) {
    queueMicroTask(function ResizeObserver() {
      requestAnimationFrame(cb);
    });
  };

  var watching = 0;

  var isWatching = function isWatching() {
    return !!watching;
  };

  var CATCH_PERIOD = 250;
  var observerConfig = {
    attributes: true,
    characterData: true,
    childList: true,
    subtree: true
  };
  var events = ['resize', 'load', 'transitionend', 'animationend', 'animationstart', 'animationiteration', 'keyup', 'keydown', 'mouseup', 'mousedown', 'mouseover', 'mouseout', 'blur', 'focus'];

  var time = function time(timeout) {
    if (timeout === void 0) {
      timeout = 0;
    }

    return Date.now() + timeout;
  };

  var scheduled = false;

  var Scheduler = function () {
    function Scheduler() {
      var _this = this;

      this.stopped = true;

      this.listener = function () {
        return _this.schedule();
      };
    }

    Scheduler.prototype.run = function (timeout) {
      var _this = this;

      if (timeout === void 0) {
        timeout = CATCH_PERIOD;
      }

      if (scheduled) {
        return;
      }

      scheduled = true;
      var until = time(timeout);
      queueResizeObserver(function () {
        var elementsHaveResized = false;

        try {
          elementsHaveResized = process();
        } finally {
          scheduled = false;
          timeout = until - time();

          if (!isWatching()) {
            return;
          }

          if (elementsHaveResized) {
            _this.run(1000);
          } else if (timeout > 0) {
            _this.run(timeout);
          } else {
            _this.start();
          }
        }
      });
    };

    Scheduler.prototype.schedule = function () {
      this.stop();
      this.run();
    };

    Scheduler.prototype.observe = function () {
      var _this = this;

      var cb = function cb() {
        return _this.observer && _this.observer.observe(document.body, observerConfig);
      };

      document.body ? cb() : global.addEventListener('DOMContentLoaded', cb);
    };

    Scheduler.prototype.start = function () {
      var _this = this;

      if (this.stopped) {
        this.stopped = false;
        this.observer = new MutationObserver(this.listener);
        this.observe();
        events.forEach(function (name) {
          return global.addEventListener(name, _this.listener, true);
        });
      }
    };

    Scheduler.prototype.stop = function () {
      var _this = this;

      if (!this.stopped) {
        this.observer && this.observer.disconnect();
        events.forEach(function (name) {
          return global.removeEventListener(name, _this.listener, true);
        });
        this.stopped = true;
      }
    };

    return Scheduler;
  }();

  var scheduler = new Scheduler();

  var updateCount = function updateCount(n) {
    !watching && n > 0 && scheduler.start();
    watching += n;
    !watching && scheduler.stop();
  };

  var skipNotifyOnElement = function skipNotifyOnElement(target) {
    return !isSVG(target) && !isReplacedElement(target) && getComputedStyle(target).display === 'inline';
  };

  var ResizeObservation = function () {
    function ResizeObservation(target, observedBox) {
      this.target = target;
      this.observedBox = observedBox || ResizeObserverBoxOptions.CONTENT_BOX;
      this.lastReportedSize = {
        inlineSize: 0,
        blockSize: 0
      };
    }

    ResizeObservation.prototype.isActive = function () {
      var size = calculateBoxSize(this.target, this.observedBox, true);

      if (skipNotifyOnElement(this.target)) {
        this.lastReportedSize = size;
      }

      if (this.lastReportedSize.inlineSize !== size.inlineSize || this.lastReportedSize.blockSize !== size.blockSize) {
        return true;
      }

      return false;
    };

    return ResizeObservation;
  }();

  var ResizeObserverDetail = function () {
    function ResizeObserverDetail(resizeObserver, callback) {
      this.activeTargets = [];
      this.skippedTargets = [];
      this.observationTargets = [];
      this.observer = resizeObserver;
      this.callback = callback;
    }

    return ResizeObserverDetail;
  }();

  var observerMap = new WeakMap();

  var getObservationIndex = function getObservationIndex(observationTargets, target) {
    for (var i = 0; i < observationTargets.length; i += 1) {
      if (observationTargets[i].target === target) {
        return i;
      }
    }

    return -1;
  };

  var ResizeObserverController = function () {
    function ResizeObserverController() {}

    ResizeObserverController.connect = function (resizeObserver, callback) {
      var detail = new ResizeObserverDetail(resizeObserver, callback);
      observerMap.set(resizeObserver, detail);
    };

    ResizeObserverController.observe = function (resizeObserver, target, options) {
      var detail = observerMap.get(resizeObserver);
      var firstObservation = detail.observationTargets.length === 0;

      if (getObservationIndex(detail.observationTargets, target) < 0) {
        firstObservation && resizeObservers.push(detail);
        detail.observationTargets.push(new ResizeObservation(target, options && options.box));
        updateCount(1);
        scheduler.schedule();
      }
    };

    ResizeObserverController.unobserve = function (resizeObserver, target) {
      var detail = observerMap.get(resizeObserver);
      var index = getObservationIndex(detail.observationTargets, target);
      var lastObservation = detail.observationTargets.length === 1;

      if (index >= 0) {
        lastObservation && resizeObservers.splice(resizeObservers.indexOf(detail), 1);
        detail.observationTargets.splice(index, 1);
        updateCount(-1);
      }
    };

    ResizeObserverController.disconnect = function (resizeObserver) {
      var _this = this;

      var detail = observerMap.get(resizeObserver);
      detail.observationTargets.slice().forEach(function (ot) {
        return _this.unobserve(resizeObserver, ot.target);
      });
      detail.activeTargets.splice(0, detail.activeTargets.length);
    };

    return ResizeObserverController;
  }();

  var ResizeObserver = function () {
    function ResizeObserver(callback) {
      if (arguments.length === 0) {
        throw new TypeError("Failed to construct 'ResizeObserver': 1 argument required, but only 0 present.");
      }

      if (typeof callback !== 'function') {
        throw new TypeError("Failed to construct 'ResizeObserver': The callback provided as parameter 1 is not a function.");
      }

      ResizeObserverController.connect(this, callback);
    }

    ResizeObserver.prototype.observe = function (target, options) {
      if (arguments.length === 0) {
        throw new TypeError("Failed to execute 'observe' on 'ResizeObserver': 1 argument required, but only 0 present.");
      }

      if (!isElement(target)) {
        throw new TypeError("Failed to execute 'observe' on 'ResizeObserver': parameter 1 is not of type 'Element");
      }

      ResizeObserverController.observe(this, target, options);
    };

    ResizeObserver.prototype.unobserve = function (target) {
      if (arguments.length === 0) {
        throw new TypeError("Failed to execute 'unobserve' on 'ResizeObserver': 1 argument required, but only 0 present.");
      }

      if (!isElement(target)) {
        throw new TypeError("Failed to execute 'unobserve' on 'ResizeObserver': parameter 1 is not of type 'Element");
      }

      ResizeObserverController.unobserve(this, target);
    };

    ResizeObserver.prototype.disconnect = function () {
      ResizeObserverController.disconnect(this);
    };

    ResizeObserver.toString = function () {
      return 'function ResizeObserver () { [polyfill code] }';
    };

    return ResizeObserver;
  }();

  exports.ResizeObserver = ResizeObserver;
  exports.ResizeObserverEntry = ResizeObserverEntry;
  exports.ResizeObserverSize = ResizeObserverSize;
  Object.defineProperty(exports, '__esModule', {
    value: true
  });
});

/***/ })

/******/ });
//# sourceMappingURL=main.min.js.map